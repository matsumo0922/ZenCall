{
  "size": {
    "tokens": 44120,
    "totalTokens": 44165,
    "characters": 220825,
    "lines": 5255
  },
  "tree": {
    ".gitignore": null,
    "Makefile": null,
    "build-logic": {
      "build.gradle.kts": null,
      "settings.gradle.kts": null,
      "src": {
        "main": {
          "kotlin": {
            "me": {
              "matsumo": {
                "grabee": {
                  "AndroidGradleDsl.kt": null,
                  "Detekt.kt": null,
                  "GradleDsl.kt": null,
                  "VersionCatalogDsl.kt": null
                }
              }
            },
            "primitive": {
              "AndroidApplicationPlugin.kt": null,
              "AndroidLibraryPlugin.kt": null,
              "DetektPlugin.kt": null,
              "KmpAndroidPlugin.kt": null,
              "KmpCommonPlugin.kt": null,
              "KmpComposePlugin.kt": null,
              "KmpIosPlugin.kt": null
            }
          }
        }
      }
    },
    "build.gradle.kts": null,
    "composeApp": {
      "build.gradle.kts": null,
      "google-services.json": null,
      "src": {
        "androidMain": {
          "AndroidManifest.xml": null,
          "kotlin": {
            "me": {
              "matsumo": {
                "grabee": {
                  "GrabeeApplication.kt": null,
                  "MainActivity.kt": null,
                  "MainViewModel.kt": null,
                  "di": {
                    "AppModule.android.kt": null
                  }
                }
              }
            }
          },
          "res": {
            "values": {
              "strings.xml": null,
              "themes.xml": null
            },
            "xml": {
              "backup_rules.xml": null,
              "data_extraction_rules.xml": null,
              "locales_config.xml": null,
              "network_security_config.xml": null
            }
          }
        },
        "commonMain": {
          "kotlin": {
            "me": {
              "matsumo": {
                "grabee": {
                  "AppNavHost.kt": null,
                  "GrabeeApp.kt": null,
                  "di": {
                    "AppModule.kt": null,
                    "Koin.kt": null
                  }
                }
              }
            }
          }
        },
        "iosMain": {
          "kotlin": {
            "me": {
              "matsumo": {
                "grabee": {
                  "Application.kt": null,
                  "InitHelper.kt": null,
                  "di": {
                    "AppModule.ios.kt": null
                  }
                }
              }
            }
          }
        }
      }
    },
    "config": {
      "detekt": {
        "detekt.yml": null
      }
    },
    "core": {
      "common": {
        "build.gradle.kts": null,
        "src": {
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "common": {
                        "Formatter.kt": null,
                        "di": {
                          "CommonModule.kt": null
                        },
                        "serializer": {
                          "ColorSerializer.kt": null,
                          "InstantSerializer.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "datasource": {
        "build.gradle.kts": null,
        "src": {
          "androidMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "datasource": {
                        "di": {
                          "DataSourceModule.android.kt": null
                        },
                        "helper": {
                          "PreferenceHelper.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "datasource": {
                        "AppSettingDataSource.kt": null,
                        "PreferencesName.kt": null,
                        "di": {
                          "DataSourceModule.kt": null
                        },
                        "helper": {
                          "PreferenceHelper.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "iosMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "datasource": {
                        "di": {
                          "DataSourceModule.ios.kt": null
                        },
                        "helper": {
                          "PreferenceHelper.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "model": {
        "build.gradle.kts": null,
        "src": {
          "androidMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "model": {
                        "Platform.android.kt": null
                      }
                    }
                  }
                }
              }
            }
          },
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "model": {
                        "AppConfig.kt": null,
                        "AppSetting.kt": null,
                        "Destination.kt": null,
                        "Platform.kt": null,
                        "Theme.kt": null
                      }
                    }
                  }
                }
              }
            }
          },
          "iosMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "model": {
                        "Platform.ios.kt": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "repository": {
        "build.gradle.kts": null,
        "src": {
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "repository": {
                        "AppSettingRepository.kt": null,
                        "di": {
                          "RepositoryModule.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "resource": {
        "build.gradle.kts": null,
        "src": {
          "commonMain": {
            "composeResources": {
              "values": {
                "strings.xml": null
              }
            }
          }
        }
      },
      "ui": {
        "build.gradle.kts": null,
        "src": {
          "androidMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "ui": {
                        "utils": {
                          "ColorUtils.android.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "ui": {
                        "screen": {
                          "AsyncLoadContents.kt": null,
                          "ScreenState.kt": null,
                          "view": {
                            "ColorSlider.kt": null,
                            "EmptyView.kt": null,
                            "ErrorView.kt": null,
                            "LoadingView.kt": null,
                            "SegmentedTabRow.kt": null
                          }
                        },
                        "theme": {
                          "NavController.kt": null,
                          "NavTransitions.kt": null,
                          "Setting.kt": null,
                          "Text.kt": null,
                          "Theme.kt": null
                        },
                        "utils": {
                          "ColorUtils.kt": null,
                          "UnitUtils.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "iosMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "core": {
                      "ui": {
                        "utils": {
                          "ColorUtils.ios.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "feature": {
      "home": {
        "build.gradle.kts": null,
        "src": {
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "feature": {
                      "home": {
                        "HomeNavigation.kt": null,
                        "HomeScreen.kt": null,
                        "HomeViewModel.kt": null,
                        "di": {
                          "HomeModule.kt": null
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "setting": {
        "build.gradle.kts": null,
        "src": {
          "commonMain": {
            "kotlin": {
              "me": {
                "matsumo": {
                  "grabee": {
                    "feature": {
                      "setting": {
                        "SettingNavigation.kt": null,
                        "SettingScreen.kt": null,
                        "SettingViewModel.kt": null,
                        "components": {
                          "SettingDeveloperModeDialog.kt": null,
                          "SettingSwitchItem.kt": null,
                          "SettingTextItem.kt": null,
                          "SettingTitleItem.kt": null,
                          "SettingTopAppBar.kt": null,
                          "section": {
                            "SettingInfoSection.kt": null,
                            "SettingOthersSection.kt": null,
                            "SettingThemeSection.kt": null
                          }
                        },
                        "di": {
                          "SettingModule.kt": null
                        },
                        "oss": {
                          "SettingLicenseNavigation.kt": null,
                          "SettingLicenseScreen.kt": null,
                          "components": {
                            "LibraryItem.kt": null,
                            "LicenseDialog.kt": null
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "gradle.properties": null,
    "gradle": {
      "keystore": {
        "debug.keystore": null
      },
      "libs.versions.toml": null,
      "wrapper": {
        "gradle-wrapper.jar": null,
        "gradle-wrapper.properties": null
      }
    },
    "gradlew": null,
    "gradlew.bat": null,
    "settings.gradle.kts": null
  },
  "files": {
    "/.gitignore": {
      "type": "content",
      "content": "# built application files\n*.apk\n*.apks\n*.aab\n*.ap_\n.externalNativeBuild\n.cxx\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\nout/\nbuild/\ncomposeApp/release/\n!src/**/build/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Eclipse project files\n.classpath\n.project\n\n# MacOS thumbnail db\n.DS_Store\n\n# Keystore\ngradle/keystore/release.keystore\n\n# IDEA/Android Studio project files, because\n# the project can be imported from settings.gradle.kts\n*.iml\n.idea\n\n# Gradle cache\n.gradle\n\n# Kotlin\n.kotlin\n\n# Sandbox stuff\n_sandbox\n\n# Android Studio captures folder\ncaptures/\n\n# Room schema\ncore/database/schemas\n\n# iOS secret files\niosApp/iosApp/secret.plist\n\n# Xcode\nxcuserdata\n*.xcodeproj/*\n!*.xcodeproj/project.pbxproj\n!*.xcodeproj/xcshareddata/\n!*.xcodeproj/project.xcworkspace/\n!*.xcworkspace/contents.xcworkspacedata\n**/xcshareddata/WorkspaceSettings.xcsettings\niosApp/Pods\n",
      "hash": "a0ce85724d39733d15341d1348aea3ae2f3dfa29aec4cd60de46454e9d780e34",
      "size": 924
    },
    "/Makefile": {
      "type": "content",
      "content": "#!/usr/bin/make -f\n\ndetekt:\n\t./gradlew detekt --auto-correct --continue\n",
      "hash": "4b6a71b6d7b969e974778b8c995f8b1c7bdaaf04364e46a6ec1361be2d69854e",
      "size": 72
    },
    "/build-logic/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    `kotlin-dsl`\n}\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n\n    toolchain.languageVersion.set(JavaLanguageVersion.of(17))\n}\n\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = \"2.0\"\n        }\n    }\n}\n\ndependencies {\n    compileOnly(gradleKotlinDsl())\n    implementation(libs.android.gradlePlugin)\n    implementation(libs.kotlin.gradlePlugin)\n    implementation(libs.secret.gradlePlugin)\n    implementation(libs.detekt.gradlePlugin)\n    implementation(libs.build.konfig.gradlePlugin)\n    implementation(libs.gms.services)\n}\n\ngradlePlugin {\n    plugins {\n        register(\"AndroidApplicationPlugin\") {\n            id = \"matsumo.primitive.android.application\"\n            implementationClass = \"primitive.AndroidApplicationPlugin\"\n        }\n        register(\"AndroidLibraryPlugin\") {\n            id = \"matsumo.primitive.android.library\"\n            implementationClass = \"primitive.AndroidLibraryPlugin\"\n        }\n        register(\"KmpPlugin\") {\n            id = \"matsumo.primitive.kmp.common\"\n            implementationClass = \"primitive.KmpCommonPlugin\"\n        }\n        register(\"KmpAndroidPlugin\") {\n            id = \"matsumo.primitive.kmp.android\"\n            implementationClass = \"primitive.KmpAndroidPlugin\"\n        }\n        register(\"KmpAndroidCompose\") {\n            id = \"matsumo.primitive.kmp.compose\"\n            implementationClass = \"primitive.KmpComposePlugin\"\n        }\n        register(\"KmpIosPlugin\") {\n            id = \"matsumo.primitive.kmp.ios\"\n            implementationClass = \"primitive.KmpIosPlugin\"\n        }\n        register(\"DetektPlugin\") {\n            id = \"matsumo.primitive.detekt\"\n            implementationClass = \"primitive.DetektPlugin\"\n        }\n    }\n}\n",
      "hash": "7133f4832f002b66676f9fc506208186437f95dd48d9ccffda523c905181372a",
      "size": 1803
    },
    "/build-logic/settings.gradle.kts": {
      "type": "content",
      "content": "@file:Suppress(\"UnstableApiUsage\")\n\ndependencyResolutionManagement {\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n    versionCatalogs {\n        create(\"libs\") {\n            from(files(\"../gradle/libs.versions.toml\"))\n        }\n    }\n}\n\nrootProject.name = \"build-logic\"\n",
      "hash": "032aa2301ec2df79d10d9e9e3b3512e5292881dda7d9a85c1f7f16aed7798896",
      "size": 318
    },
    "/build-logic/src/main/kotlin/me/matsumo/grabee/AndroidGradleDsl.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport com.android.build.gradle.LibraryExtension\nimport com.android.build.gradle.TestedExtension\nimport com.android.build.gradle.internal.dsl.BaseAppModuleExtension\nimport org.gradle.api.JavaVersion\nimport org.gradle.api.Project\nimport org.gradle.kotlin.dsl.configure\nimport org.gradle.kotlin.dsl.dependencies\n\nfun Project.androidApplication(action: BaseAppModuleExtension.() -> Unit) {\n    extensions.configure(action)\n}\n\nfun Project.androidLibrary(action: LibraryExtension.() -> Unit) {\n    extensions.configure(action)\n}\n\nfun Project.android(action: TestedExtension.() -> Unit) {\n    extensions.configure(action)\n}\n\nfun Project.setupAndroid() {\n    android {\n        defaultConfig {\n            targetSdk = libs.version(\"targetSdk\").toInt()\n            minSdk = libs.version(\"minSdk\").toInt()\n\n            javaCompileOptions {\n                annotationProcessorOptions {\n                    arguments += mapOf(\n                        \"room.schemaLocation\" to \"$projectDir/schemas\",\n                        \"room.incremental\" to \"true\"\n                    )\n                }\n            }\n\n            testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n        }\n\n        splits {\n            abi {\n                isEnable = true\n                isUniversalApk = true\n\n                reset()\n                include(\"x86\", \"x86_64\", \"armeabi-v7a\", \"arm64-v8a\")\n            }\n        }\n\n        compileOptions {\n            sourceCompatibility = JavaVersion.VERSION_17\n            targetCompatibility = JavaVersion.VERSION_17\n            isCoreLibraryDesugaringEnabled = true\n        }\n\n        dependencies {\n            add(\"coreLibraryDesugaring\", libs.library(\"desugar\"))\n        }\n    }\n}\n",
      "hash": "c5e6c10468fce6761d64bd0d78c60c28dfac23ae529d89dc726917073d5f41f1",
      "size": 1746
    },
    "/build-logic/src/main/kotlin/me/matsumo/grabee/Detekt.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport io.gitlab.arturbosch.detekt.extensions.DetektExtension\nimport io.gitlab.arturbosch.detekt.report.ReportMergeTask\nimport org.gradle.api.Project\nimport org.gradle.api.tasks.TaskProvider\nimport org.gradle.kotlin.dsl.getByType\nimport org.gradle.kotlin.dsl.register\nimport org.gradle.kotlin.dsl.withType\n\n@Suppress(\"UNCHECKED_CAST\")\ninternal fun Project.configureDetekt() {\n    extensions.getByType<DetektExtension>().apply {\n        toolVersion = libs.version(\"detekt\")\n        parallel = true\n        config.setFrom(files(\"${project.rootDir}/config/detekt/detekt.yml\"))\n        baseline = file(\"${project.rootDir}/config/detekt/baseline.xml\")\n        buildUponDefaultConfig = true\n        ignoreFailures = false\n        autoCorrect = false\n    }\n\n    val reportMerge = if (!rootProject.tasks.names.contains(\"reportMerge\")) {\n        rootProject.tasks.register(\"reportMerge\", ReportMergeTask::class) {\n            output.set(rootProject.layout.buildDirectory.file(\"reports/detekt/merge.xml\"))\n        }\n    } else {\n        rootProject.tasks.named(\"reportMerge\") as TaskProvider<ReportMergeTask>\n    }\n\n    plugins.withType<io.gitlab.arturbosch.detekt.DetektPlugin> {\n        tasks.withType<io.gitlab.arturbosch.detekt.Detekt> detekt@{\n            finalizedBy(reportMerge)\n\n            source = project.files(\"./\").asFileTree\n\n            include(\"**/*.kt\")\n            include(\"**/*.kts\")\n            exclude(\"**/resources/**\")\n            exclude(\"**/build/**\")\n\n            reportMerge.configure {\n                input.from(this@detekt.xmlReportFile)\n            }\n        }\n    }\n}\n",
      "hash": "df20a4c46f129d8beaaec2a873e82071ceaf35434a6754857119cca85f719988",
      "size": 1617
    },
    "/build-logic/src/main/kotlin/me/matsumo/grabee/GradleDsl.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport org.gradle.api.Project\nimport org.gradle.api.artifacts.Dependency\nimport org.gradle.api.artifacts.ExternalModuleDependencyBundle\nimport org.gradle.api.artifacts.MinimalExternalModuleDependency\nimport org.gradle.api.plugins.JavaPluginExtension\nimport org.gradle.api.provider.Provider\nimport org.gradle.kotlin.dsl.DependencyHandlerScope\nimport org.gradle.kotlin.dsl.configure\n\nfun DependencyHandlerScope.implementation(artifact: Dependency) {\n    add(\"implementation\", artifact)\n}\n\nfun DependencyHandlerScope.implementation(artifact: MinimalExternalModuleDependency) {\n    add(\"implementation\", artifact)\n}\n\nfun DependencyHandlerScope.implementation(artifact: ExternalModuleDependencyBundle) {\n    add(\"implementation\", artifact)\n}\n\nfun DependencyHandlerScope.implementation(provider: Provider<ExternalModuleDependencyBundle>) {\n    add(\"implementation\", provider)\n}\n\nfun DependencyHandlerScope.debugImplementation(artifact: MinimalExternalModuleDependency) {\n    add(\"debugImplementation\", artifact)\n}\n\nfun DependencyHandlerScope.androidTestImplementation(artifact: Dependency) {\n    add(\"androidTestImplementation\", artifact)\n}\n\nfun DependencyHandlerScope.androidTestImplementation(artifact: MinimalExternalModuleDependency) {\n    add(\"androidTestImplementation\", artifact)\n}\n\nfun DependencyHandlerScope.testImplementation(artifact: MinimalExternalModuleDependency) {\n    add(\"testImplementation\", artifact)\n}\n\nfun DependencyHandlerScope.implementationPlatform(artifact: MinimalExternalModuleDependency) {\n    add(\"implementation\", platform(artifact))\n}\n\nfun DependencyHandlerScope.lintChecks(artifact: MinimalExternalModuleDependency) {\n    add(\"lintChecks\", artifact)\n}\n\nprivate fun DependencyHandlerScope.api(artifact: MinimalExternalModuleDependency) {\n    add(\"api\", artifact)\n}\n\nfun Project.java(action: JavaPluginExtension.() -> Unit) {\n    extensions.configure(action)\n}\n",
      "hash": "c1598d9d80faa83cfff9c5c599c08cf0ea9f240fe8bffd2b654940efa015d299",
      "size": 1913
    },
    "/build-logic/src/main/kotlin/me/matsumo/grabee/VersionCatalogDsl.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport org.gradle.api.Project\nimport org.gradle.api.artifacts.ExternalModuleDependencyBundle\nimport org.gradle.api.artifacts.MinimalExternalModuleDependency\nimport org.gradle.api.artifacts.VersionCatalog\nimport org.gradle.api.artifacts.VersionCatalogsExtension\nimport org.gradle.api.provider.Provider\nimport org.gradle.kotlin.dsl.getByType\nimport org.gradle.plugin.use.PluginDependency\n\ninternal val Project.libs: VersionCatalog\n    get() = extensions.getByType<VersionCatalogsExtension>().named(\"libs\")\n\ninternal fun VersionCatalog.version(name: String): String {\n    return findVersion(name).get().requiredVersion\n}\n\ninternal fun VersionCatalog.library(name: String): MinimalExternalModuleDependency {\n    return findLibrary(name).get().get()\n}\n\ninternal fun VersionCatalog.plugin(name: String): PluginDependency {\n    return findPlugin(name).get().get()\n}\n\ninternal fun VersionCatalog.bundle(name: String): Provider<ExternalModuleDependencyBundle> {\n    return findBundle(name).get()\n}\n",
      "hash": "c315c5a6c371a341b6550bd3e7998203eeabcaf615bb467f95f1211b199c909c",
      "size": 1016
    },
    "/build-logic/src/main/kotlin/primitive/AndroidApplicationPlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport me.matsumo.zencall.androidApplication\nimport me.matsumo.zencall.libs\nimport me.matsumo.zencall.setupAndroid\nimport me.matsumo.zencall.version\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\nclass AndroidApplicationPlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            with(pluginManager) {\n                apply(\"com.android.application\")\n                apply(\"kotlin-parcelize\")\n                apply(\"kotlinx-serialization\")\n                apply(\"project-report\")\n                apply(\"com.google.gms.google-services\")\n                apply(\"com.google.firebase.crashlytics\")\n                apply(\"com.google.devtools.ksp\")\n                apply(\"com.mikepenz.aboutlibraries.plugin\")\n                apply(\"com.codingfeline.buildkonfig\")\n            }\n\n            androidApplication {\n                setupAndroid()\n\n                compileSdk = libs.version(\"compileSdk\").toInt()\n                defaultConfig.targetSdk = libs.version(\"targetSdk\").toInt()\n                buildFeatures.viewBinding = true\n\n                defaultConfig {\n                    applicationId = \"me.matsumo.zencall\"\n\n                    versionName = libs.version(\"versionName\")\n                    versionCode = libs.version(\"versionCode\").toInt()\n                }\n\n                packaging {\n                    resources.excludes.addAll(\n                        listOf(\n                            \"LICENSE\",\n                            \"LICENSE.txt\",\n                            \"NOTICE\",\n                            \"asm-license.txt\",\n                            \"cglib-license.txt\",\n                            \"mozilla/public-suffix-list.txt\",\n                        )\n                    )\n                }\n            }\n        }\n    }\n}\n",
      "hash": "bfe1a539c11aa05f51eadbfb25766859595c861bd3fffdd970199150168b5642",
      "size": 1821
    },
    "/build-logic/src/main/kotlin/primitive/AndroidLibraryPlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport com.android.build.gradle.LibraryExtension\nimport me.matsumo.zencall.androidLibrary\nimport me.matsumo.zencall.libs\nimport me.matsumo.zencall.setupAndroid\nimport me.matsumo.zencall.version\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.gradle.kotlin.dsl.configure\n\nclass AndroidLibraryPlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            with(pluginManager) {\n                apply(\"com.android.library\")\n                apply(\"kotlin-parcelize\")\n                apply(\"kotlinx-serialization\")\n                apply(\"project-report\")\n                apply(\"com.google.devtools.ksp\")\n            }\n\n            androidLibrary {\n                setupAndroid()\n            }\n\n            extensions.configure<LibraryExtension> {\n                compileSdk = libs.version(\"compileSdk\").toInt()\n                defaultConfig.targetSdk = libs.version(\"targetSdk\").toInt()\n                buildFeatures.viewBinding = true\n            }\n        }\n    }\n}\n",
      "hash": "2b61b5246abf12f0c36050d1070a3f809ac8813c77131696632e5d90f5e08e19",
      "size": 1041
    },
    "/build-logic/src/main/kotlin/primitive/DetektPlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport me.matsumo.zencall.configureDetekt\nimport me.matsumo.zencall.library\nimport me.matsumo.zencall.libs\nimport me.matsumo.zencall.plugin\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.gradle.kotlin.dsl.dependencies\n\nclass DetektPlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            pluginManager.apply(libs.plugin(\"detekt\").pluginId)\n\n            configureDetekt()\n\n            dependencies {\n                \"detektPlugins\"(libs.library(\"detekt-formatting\"))\n                \"detektPlugins\"(libs.library(\"twitter-compose-rule\"))\n            }\n        }\n    }\n}\n",
      "hash": "974adec8ef31acc4a8c081c1bd28261c2d2dd67b4f569f9bb5ca29f618e8dba4",
      "size": 653
    },
    "/build-logic/src/main/kotlin/primitive/KmpAndroidPlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport me.matsumo.zencall.android\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.jetbrains.kotlin.gradle.dsl.JvmTarget\n\n@Suppress(\"unused\")\nclass KmpAndroidPlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            kotlin {\n                androidTarget {\n                    compilerOptions {\n                        jvmTarget.set(JvmTarget.JVM_17)\n                    }\n                }\n            }\n\n            android {\n                sourceSets {\n                    getByName(\"main\") {\n                        manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n                        res.srcDirs(\"src/androidMain/res\")\n                    }\n                }\n            }\n        }\n    }\n}\n",
      "hash": "70123c598cebfbb06336b4b381763ae506430b573e1ec87b1b48bcb4f599ebc8",
      "size": 793
    },
    "/build-logic/src/main/kotlin/primitive/KmpCommonPlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport me.matsumo.zencall.library\nimport me.matsumo.zencall.libs\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.gradle.kotlin.dsl.configure\nimport org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension\n\nclass KmpCommonPlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            with(pluginManager) {\n                apply(\"org.jetbrains.kotlin.multiplatform\")\n            }\n\n            kotlin {\n                sourceSets.all {\n                    languageSettings.enableLanguageFeature(\"ExplicitBackingFields\")\n                }\n\n                sourceSets.commonMain.dependencies {\n                    val kotlinBom = libs.library(\"kotlin-bom\")\n                    implementation(project.dependencies.platform(kotlinBom))\n                }\n            }\n        }\n    }\n}\n\nfun Project.kotlin(action: KotlinMultiplatformExtension.() -> Unit) {\n    extensions.configure(action)\n}\n",
      "hash": "7f66f25e76911944032023fa5272bcbc4c15cf0860cad58570d5c7bac560a9cc",
      "size": 971
    },
    "/build-logic/src/main/kotlin/primitive/KmpComposePlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport me.matsumo.zencall.android\nimport me.matsumo.zencall.androidTestImplementation\nimport me.matsumo.zencall.debugImplementation\nimport me.matsumo.zencall.implementation\nimport me.matsumo.zencall.library\nimport me.matsumo.zencall.libs\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.gradle.kotlin.dsl.dependencies\n\nclass KmpComposePlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            with(pluginManager) {\n                apply(\"org.jetbrains.compose\")\n                apply(\"org.jetbrains.kotlin.plugin.compose\")\n            }\n\n            android {\n                buildFeatures.compose = true\n            }\n\n            dependencies {\n                val bom = libs.library(\"compose-bom\")\n\n                implementation(project.dependencies.platform(bom))\n                implementation(libs.library(\"compose-ui-tooling-preview\"))\n                debugImplementation(libs.library(\"compose-ui-tooling\"))\n                androidTestImplementation(project.dependencies.platform(bom))\n            }\n        }\n    }\n}\n",
      "hash": "33333687810e0607f5ab22a7c7dd65a5a2f87058ef8e4127eb49b9d55c9ed847",
      "size": 1106
    },
    "/build-logic/src/main/kotlin/primitive/KmpIosPlugin.kt": {
      "type": "content",
      "content": "package primitive\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\nclass KmpIosPlugin : Plugin<Project> {\n    override fun apply(target: Project) {\n        with(target) {\n            kotlin {\n                applyDefaultHierarchyTemplate()\n\n                iosX64()\n                iosArm64()\n                iosSimulatorArm64()\n\n                sourceSets.named { it.lowercase().startsWith(\"ios\") }.configureEach {\n                    languageSettings {\n                        optIn(\"kotlinx.cinterop.ExperimentalForeignApi\")\n                    }\n                }\n            }\n        }\n    }\n}\n",
      "hash": "a004b336749d0ed6a4d4c77950a22e658f18c38ca0ff7f89ff68630ecc0ed77f",
      "size": 612
    },
    "/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    alias(libs.plugins.android.application) apply false\n    alias(libs.plugins.android.library) apply false\n    alias(libs.plugins.kmp) apply false\n    alias(libs.plugins.kmpCompose) apply false\n    alias(libs.plugins.kmpComplete) apply false\n    alias(libs.plugins.kotlin.serialization) apply false\n    alias(libs.plugins.kotlin.compose.compiler) apply false\n    alias(libs.plugins.firebase.crashlytics) apply false\n    alias(libs.plugins.libraries) apply false\n    alias(libs.plugins.detekt) apply false\n    alias(libs.plugins.ksp) apply false\n    alias(libs.plugins.gms) apply false\n}\n",
      "hash": "906166bcb40db118cb3f9a37d17ccc03fd5e12b45ee25c4f290c2784bf2a104b",
      "size": 598
    },
    "/composeApp/build.gradle.kts": {
      "type": "content",
      "content": "@file:Suppress(\"UnusedPrivateProperty\")\n\nimport com.android.build.api.variant.ResValue\nimport com.codingfeline.buildkonfig.compiler.FieldSpec\nimport org.jetbrains.kotlin.konan.properties.Properties\n\nplugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.application\")\n    id(\"matsumo.primitive.kmp.compose\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nval localProperties = Properties().apply {\n    project.rootDir.resolve(\"local.properties\").also {\n        if (it.exists()) load(it.inputStream())\n    }\n}\n\nval admobTestAppId = \"ca-app-pub-0000000000000000~0000000000\"\nval bannerAdTestId = \"ca-app-pub-3940256099942544/6300978111\"\nval nativeAdTestId = \"ca-app-pub-3940256099942544/2247696110\"\nval rewardAdTestId = \"ca-app-pub-3940256099942544/5224354917\"\n\nandroid {\n    namespace = \"me.matsumo.zencall\"\n\n    signingConfigs {\n        getByName(\"debug\") {\n            storeFile = file(\"${project.rootDir}/gradle/keystore/debug.keystore\")\n        }\n        create(\"release\") {\n            storeFile = file(\"${project.rootDir}/gradle/keystore/release.keystore\")\n            storePassword = localProperties.getProperty(\"storePassword\") ?: System.getenv(\"RELEASE_STORE_PASSWORD\")\n            keyPassword = localProperties.getProperty(\"keyPassword\") ?: System.getenv(\"RELEASE_KEY_PASSWORD\")\n            keyAlias = localProperties.getProperty(\"keyAlias\") ?: System.getenv(\"RELEASE_KEY_ALIAS\")\n        }\n        create(\"billing\") {\n            storeFile = file(\"${project.rootDir}/gradle/keystore/release.keystore\")\n            storePassword = localProperties.getProperty(\"storePassword\") ?: System.getenv(\"RELEASE_STORE_PASSWORD\")\n            keyPassword = localProperties.getProperty(\"keyPassword\") ?: System.getenv(\"RELEASE_KEY_PASSWORD\")\n            keyAlias = localProperties.getProperty(\"keyAlias\") ?: System.getenv(\"RELEASE_KEY_ALIAS\")\n        }\n    }\n\n    buildTypes {\n        release {\n            signingConfig = signingConfigs.getByName(\"release\")\n            isMinifyEnabled = true\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }\n        debug {\n            signingConfig = signingConfigs.getByName(\"debug\")\n            isDebuggable = true\n            versionNameSuffix = \".D\"\n            applicationIdSuffix = \".debug\"\n        }\n        create(\"billing\") {\n            signingConfig = signingConfigs.getByName(\"billing\")\n            isDebuggable = true\n            matchingFallbacks.add(\"debug\")\n        }\n    }\n\n    androidComponents {\n        onVariants {\n            val appName = when (it.buildType) {\n                \"debug\" -> \"Grabee Debug\"\n                \"billing\" -> \"Grabee Billing\"\n                else -> null\n            }\n\n            it.manifestPlaceholders.apply {\n                put(\"ADMOB_ANDROID_APP_ID\", localProperties.getProperty(\"ADMOB_ANDROID_APP_ID\") ?: admobTestAppId)\n                put(\"ADMOB_IOS_APP_ID\", localProperties.getProperty(\"ADMOB_IOS_APP_ID\") ?: admobTestAppId)\n            }\n\n            if (appName != null) {\n                it.resValues.apply {\n                    put(it.makeResValueKey(\"string\", \"app_name\"), ResValue(appName, null))\n                }\n            }\n\n            if (it.buildType == \"release\") {\n                it.packaging.resources.excludes.add(\"META-INF/**\")\n            }\n        }\n    }\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:model\"))\n            implementation(project(\":core:datasource\"))\n            implementation(project(\":core:repository\"))\n            implementation(project(\":core:ui\"))\n            implementation(project(\":core:resource\"))\n\n            implementation(project(\":feature:home\"))\n            implementation(project(\":feature:setting\"))\n        }\n\n        androidMain.dependencies {\n            implementation(libs.androidx.core.splashscreen)\n            implementation(libs.play.review)\n            implementation(libs.play.update)\n            implementation(libs.koin.androidx.startup)\n        }\n    }\n}\n\nbuildkonfig {\n    packageName = \"me.matsumo.zencall\"\n\n    defaultConfigs {\n        fun setField(name: String, defaultValue: String = \"\") {\n            val envValue = System.getenv(name)\n            val propertyValue = localProperties.getProperty(name)\n\n            buildConfigField(FieldSpec.Type.STRING, name, propertyValue ?: envValue ?: defaultValue)\n        }\n\n        setField(\"VERSION_NAME\", libs.versions.versionName.get())\n        setField(\"VERSION_CODE\", libs.versions.versionCode.get())\n\n        setField(\"DEVELOPER_PIN\", \"1234\")\n        setField(\"PURCHASE_ANDROID_API_KEY\")\n        setField(\"PURCHASE_IOS_API_KEY\")\n\n        setField(\"ADMOB_ANDROID_APP_ID\", admobTestAppId)\n        setField(\"ADMOB_ANDROID_BANNER_AD_UNIT_ID\", admobTestAppId)\n        setField(\"ADMOB_ANDROID_INTERSTITIAL_AD_UNIT_ID\", bannerAdTestId)\n        setField(\"ADMOB_ANDROID_NATIVE_AD_UNIT_ID\", nativeAdTestId)\n        setField(\"ADMOB_ANDROID_REWARDED_AD_UNIT_ID\", rewardAdTestId)\n\n        setField(\"ADMOB_IOS_APP_ID\", admobTestAppId)\n        setField(\"ADMOB_IOS_BANNER_AD_UNIT_ID\", bannerAdTestId)\n        setField(\"ADMOB_IOS_INTERSTITIAL_AD_UNIT_ID\", bannerAdTestId)\n        setField(\"ADMOB_IOS_NATIVE_AD_UNIT_ID\", nativeAdTestId)\n        setField(\"ADMOB_IOS_REWARDED_AD_UNIT_ID\", rewardAdTestId)\n\n        setField(\"APPLOVIN_SDK_KEY\")\n    }\n}\n",
      "hash": "72a61cd2315b77e112f6bf5b6f5e43384966d0544872c33bfd281112352d4587",
      "size": 5512
    },
    "/composeApp/google-services.json": {
      "type": "content",
      "content": "{\n  \"project_info\": {\n    \"project_number\": \"641570800809\",\n    \"project_id\": \"grabee-368d2\",\n    \"storage_bucket\": \"grabee-368d2.firebasestorage.app\"\n  },\n  \"client\": [\n    {\n      \"client_info\": {\n        \"mobilesdk_app_id\": \"1:641570800809:android:2714f74ff59ce9a39a95b8\",\n        \"android_client_info\": {\n          \"package_name\": \"me.matsumo.zencall\"\n        }\n      },\n      \"oauth_client\": [],\n      \"api_key\": [\n        {\n          \"current_key\": \"AIzaSyCE_LfdTA3kvfQhaZVMj4PjNJDQzt-oDGY\"\n        }\n      ],\n      \"services\": {\n        \"appinvite_service\": {\n          \"other_platform_oauth_client\": []\n        }\n      }\n    },\n    {\n      \"client_info\": {\n        \"mobilesdk_app_id\": \"1:641570800809:android:2714f74ff59ce9a39a95b8\",\n        \"android_client_info\": {\n          \"package_name\": \"me.matsumo.zencall.debug\"\n        }\n      },\n      \"oauth_client\": [],\n      \"api_key\": [\n        {\n          \"current_key\": \"AIzaSyCE_LfdTA3kvfQhaZVMj4PjNJDQzt-oDGY\"\n        }\n      ],\n      \"services\": {\n        \"appinvite_service\": {\n          \"other_platform_oauth_client\": []\n        }\n      }\n    }\n  ],\n  \"configuration_version\": \"1\"\n}\n",
      "hash": "862041a209a0bf3866e924dcd9efa4385b6bbd94bdcfd19258c4f14b1a3c4fc0",
      "size": 1143,
      "json": {
        "project_info": {
          "project_number": "641570800809",
          "project_id": "grabee-368d2",
          "storage_bucket": "grabee-368d2.firebasestorage.app"
        },
        "client": [
          {
            "client_info": {
              "mobilesdk_app_id": "1:641570800809:android:2714f74ff59ce9a39a95b8",
              "android_client_info": {
                "package_name": "me.matsumo.zencall"
              }
            },
            "oauth_client": [],
            "api_key": [
              {
                "current_key": "AIzaSyCE_LfdTA3kvfQhaZVMj4PjNJDQzt-oDGY"
              }
            ],
            "services": {
              "appinvite_service": {
                "other_platform_oauth_client": []
              }
            }
          },
          {
            "client_info": {
              "mobilesdk_app_id": "1:641570800809:android:2714f74ff59ce9a39a95b8",
              "android_client_info": {
                "package_name": "me.matsumo.zencall.debug"
              }
            },
            "oauth_client": [],
            "api_key": [
              {
                "current_key": "AIzaSyCE_LfdTA3kvfQhaZVMj4PjNJDQzt-oDGY"
              }
            ],
            "services": {
              "appinvite_service": {
                "other_platform_oauth_client": []
              }
            }
          }
        ],
        "configuration_version": "1"
      }
    },
    "/composeApp/src/androidMain/AndroidManifest.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    package=\"me.matsumo.zencall\">\n\n    <application\n        android:name=\".GrabeeApplication\"\n        android:allowBackup=\"true\"\n        android:enableOnBackInvokedCallback=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:label=\"@string/app_name\"\n        android:localeConfig=\"@xml/locales_config\"\n        android:networkSecurityConfig=\"@xml/network_security_config\"\n        android:requestLegacyExternalStorage=\"true\"\n        android:icon=\"@android:drawable/sym_def_app_icon\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.Matsumo\"\n        tools:targetApi=\"tiramisu\">\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:launchMode=\"standard\"\n            android:theme=\"@style/Theme.Matsumo.Splash\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n\n        <meta-data\n            android:name=\"com.google.android.gms.ads.APPLICATION_ID\"\n            android:value=\"${ADMOB_ANDROID_APP_ID}\" />\n    </application>\n</manifest>\n",
      "hash": "ecce1654e082bb150a032f388776194db038744f5d05080105ae0ee4713d8dce",
      "size": 1436
    },
    "/composeApp/src/androidMain/kotlin/me/matsumo/grabee/GrabeeApplication.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport android.app.Application\nimport io.github.aakira.napier.DebugAntilog\nimport io.github.aakira.napier.Napier\nimport me.matsumo.zencall.di.applyModules\nimport org.koin.android.ext.koin.androidContext\nimport org.koin.android.ext.koin.androidLogger\nimport org.koin.androix.startup.KoinStartup\nimport org.koin.core.annotation.KoinExperimentalAPI\nimport org.koin.dsl.koinConfiguration\n\n@OptIn(KoinExperimentalAPI::class)\nclass GrabeeApplication : Application(), KoinStartup {\n    override fun onCreate() {\n        super.onCreate()\n\n        if (BuildConfig.DEBUG) {\n            // StrictMode.enableDefaults()\n            Napier.base(DebugAntilog())\n        }\n    }\n\n    override fun onKoinStartup() = koinConfiguration {\n        androidContext(this@GrabeeApplication)\n        androidLogger()\n        applyModules()\n    }\n}\n",
      "hash": "9a42908b7efcfe5a4edcbbfb5e9be6646feddfdd2797d9278a5f0a43ddaf82ce",
      "size": 847
    },
    "/composeApp/src/androidMain/kotlin/me/matsumo/grabee/MainActivity.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport android.graphics.Color\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.SystemBarStyle\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport com.google.android.gms.ads.MobileAds\nimport io.github.vinceglb.filekit.FileKit\nimport io.github.vinceglb.filekit.dialogs.init\nimport me.matsumo.zencall.core.model.Theme\nimport me.matsumo.zencall.core.ui.theme.shouldUseDarkTheme\nimport org.koin.androidx.viewmodel.ext.android.viewModel\n\nclass MainActivity : ComponentActivity() {\n\n    private val viewModel by viewModel<MainViewModel>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        val splashScreen = installSplashScreen()\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            val userData by viewModel.setting.collectAsStateWithLifecycle(null)\n            val isSystemInDarkTheme = shouldUseDarkTheme(userData?.theme ?: Theme.System)\n\n            val lightScrim = Color.argb(0xe6, 0xFF, 0xFF, 0xFF)\n            val darkScrim = Color.argb(0x80, 0x1b, 0x1b, 0x1b)\n\n            DisposableEffect(isSystemInDarkTheme) {\n                enableEdgeToEdge(\n                    statusBarStyle = SystemBarStyle.auto(Color.TRANSPARENT, Color.TRANSPARENT) { isSystemInDarkTheme },\n                    navigationBarStyle = SystemBarStyle.auto(lightScrim, darkScrim) { isSystemInDarkTheme },\n                )\n                onDispose {}\n            }\n\n            userData?.let {\n                GrabeeApp(\n                    modifier = Modifier.fillMaxSize(),\n                    setting = it,\n                )\n            }\n\n            splashScreen.setKeepOnScreenCondition { userData == null }\n        }\n\n        FileKit.init(this)\n        initAdsSdk()\n    }\n\n    private fun initAdsSdk() {\n        if (viewModel.isAdsSdkInitialized.value) {\n            return\n        }\n\n        MobileAds.initialize(this)\n        viewModel.setAdsSdkInitialized()\n    }\n}\n",
      "hash": "1d4efa9a0f3df2e66e612ff74d280f9a4e79ffe44e153b65aa797acf39697b6f",
      "size": 2345
    },
    "/composeApp/src/androidMain/kotlin/me/matsumo/grabee/MainViewModel.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport me.matsumo.zencall.core.repository.AppSettingRepository\n\nclass MainViewModel(\n    private val settingRepository: AppSettingRepository,\n) : ViewModel() {\n\n    val setting = settingRepository.setting\n\n    private val _isAdsSdkInitialized = MutableStateFlow(false)\n    val isAdsSdkInitialized = _isAdsSdkInitialized.asStateFlow()\n\n    fun setAdsSdkInitialized() {\n        _isAdsSdkInitialized.value = true\n    }\n}\n",
      "hash": "79b0e53adca916caa5eefdb84f89be16ed7a3eaf39fdd4b201af517e1633d1b9",
      "size": 571
    },
    "/composeApp/src/androidMain/kotlin/me/matsumo/grabee/di/AppModule.android.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.di\n\nimport me.matsumo.zencall.MainViewModel\nimport org.koin.core.module.Module\nimport org.koin.core.module.dsl.viewModelOf\nimport org.koin.dsl.module\n\ninternal actual val appModulePlatform: Module = module {\n    viewModelOf(::MainViewModel)\n}\n",
      "hash": "9de6f9849b4a8c0341d36c3c9f6d9f81975ddf195d0301806071545e759a9e0b",
      "size": 268
    },
    "/composeApp/src/androidMain/res/values/strings.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"app_name\">Grabee</string>\n</resources>\n",
      "hash": "a33545727e573f5d8e8fe3fd3cf33a467e6b6121e512c1f8f742ac155adcfb56",
      "size": 108
    },
    "/composeApp/src/androidMain/res/values/themes.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <style name=\"NightAdjusted.Theme.Matsumo\" parent=\"android:Theme.Material.Light.NoActionBar\">\n        <item name=\"android:windowLightNavigationBar\" tools:targetApi=\"27\">true</item>\n    </style>\n\n    <style name=\"PlatformAdjusted.Theme.Matsumo\" parent=\"NightAdjusted.Theme.Matsumo\">\n        <item name=\"android:statusBarColor\">#000</item>\n    </style>\n\n    <!-- The final theme we use -->\n    <style name=\"Theme.Matsumo\" parent=\"PlatformAdjusted.Theme.Matsumo\" />\n\n    <style name=\"NightAdjusted.Theme.Splash\" parent=\"Theme.SplashScreen\">\n        <item name=\"android:windowLightNavigationBar\" tools:targetApi=\"27\">true</item>\n    </style>\n\n    <style name=\"Theme.Matsumo.Splash\" parent=\"NightAdjusted.Theme.Splash\">\n        <item name=\"postSplashScreenTheme\">@style/Theme.Matsumo</item>\n    </style>\n\n</resources>\n",
      "hash": "13288228ab44b85634bc4ca88a6189bf702204f32380bd7524c11b8c80cd46bf",
      "size": 915
    },
    "/composeApp/src/androidMain/res/xml/backup_rules.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?><!--\n   Sample backup rules file; uncomment and customize as necessary.\n   See https://developer.android.com/guide/topics/data/autobackup\n   for details.\n   Note: This file is ignored for devices older that API 31\n   See https://developer.android.com/about/versions/12/backup-restore\n-->\n<full-backup-content>\n    <!--\n   <include domain=\"sharedpref\" path=\".\"/>\n   <exclude domain=\"sharedpref\" path=\"device.xml\"/>\n-->\n</full-backup-content>",
      "hash": "9f7e4c84c8fd2c81478d15962383f47cc6ff55d62abcd40c8ffa6fc08a8c35b7",
      "size": 478
    },
    "/composeApp/src/androidMain/res/xml/data_extraction_rules.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?><!--\n   Sample data extraction rules file; uncomment and customize as necessary.\n   See https://developer.android.com/about/versions/12/backup-restore#xml-changes\n   for details.\n-->\n<data-extraction-rules>\n    <cloud-backup>\n        <!-- TODO: Use <include> and <exclude> to control what is backed up.\n        <include .../>\n        <exclude .../>\n        -->\n    </cloud-backup>\n    <!--\n    <device-transfer>\n        <include .../>\n        <exclude .../>\n    </device-transfer>\n    -->\n</data-extraction-rules>",
      "hash": "cb1fc47ab4a984530ed60e0e6ee638929c3038290e7e7e0b4b03a3a30fbe7381",
      "size": 551
    },
    "/composeApp/src/androidMain/res/xml/locales_config.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale-config xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <locale android:name=\"ja-jp\" />\n    <locale android:name=\"en-us\" />\n</locale-config>\n",
      "hash": "e5354ebbfc241aeaea4cf829106e1abf54879b3609eb20651ca011b92449feb2",
      "size": 203
    },
    "/composeApp/src/androidMain/res/xml/network_security_config.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <!-- デファルトの設定 -->\n    <base-config cleartextTrafficPermitted=\"false\" />\n    <!-- ドメイン毎の設定 -->\n    <!--<domain-config cleartextTrafficPermitted=\"true\" />-->\n</network-security-config>\n",
      "hash": "99a1b7bdc3d170001ebf8ca7a5a77f88c7e0443a61f665f54c80df8c5ae89ff2",
      "size": 284
    },
    "/composeApp/src/commonMain/kotlin/me/matsumo/grabee/AppNavHost.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.compose.NavHost\nimport me.matsumo.zencall.core.model.Destination\nimport me.matsumo.zencall.core.ui.theme.LocalNavController\nimport me.matsumo.zencall.feature.home.homeScreen\nimport me.matsumo.zencall.feature.setting.oss.settingLicenseScreen\nimport me.matsumo.zencall.feature.setting.settingScreen\n\n@Composable\ninternal fun AppNavHost(\n    modifier: Modifier = Modifier,\n) {\n    val navController = LocalNavController.current\n\n    NavHost(\n        modifier = modifier,\n        navController = navController,\n        startDestination = Destination.Home,\n    ) {\n        homeScreen()\n        settingScreen()\n        settingLicenseScreen()\n    }\n}\n",
      "hash": "7132fd92e79378750c240c9a69e2d882c23d41e784190c7b94f4a30635fe1e39",
      "size": 772
    },
    "/composeApp/src/commonMain/kotlin/me/matsumo/grabee/GrabeeApp.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport coil3.ImageLoader\nimport coil3.compose.setSingletonImageLoaderFactory\nimport io.github.vinceglb.filekit.coil.addPlatformFileSupport\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.ui.theme.GrabeeTheme\n\n@Composable\ninternal fun GrabeeApp(\n    setting: AppSetting,\n    modifier: Modifier = Modifier,\n) {\n    SetupCoil()\n\n    GrabeeTheme(setting) {\n        AppNavHost(modifier)\n    }\n}\n\n@Composable\nprivate fun SetupCoil() {\n    setSingletonImageLoaderFactory { context ->\n        ImageLoader.Builder(context)\n            .components {\n                addPlatformFileSupport()\n            }\n            .build()\n    }\n}\n",
      "hash": "1b2b5c76a5b0f588dd098be6658ca3d8f35b075a6ba1f512d94227dab436928b",
      "size": 759
    },
    "/composeApp/src/commonMain/kotlin/me/matsumo/grabee/di/AppModule.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.di\n\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.IO\nimport kotlinx.coroutines.SupervisorJob\nimport me.matsumo.zencall.BuildKonfig\nimport me.matsumo.zencall.core.model.AppConfig\nimport me.matsumo.zencall.core.model.Platform\nimport me.matsumo.zencall.core.model.currentPlatform\nimport org.koin.core.module.Module\nimport org.koin.dsl.module\n\nval appModule = module {\n    single<CoroutineDispatcher> {\n        Dispatchers.IO.limitedParallelism(24)\n    }\n\n    single<CoroutineScope> {\n        CoroutineScope(SupervisorJob() + get<CoroutineDispatcher>())\n    }\n\n    single {\n        val adMobAppId: String\n        val adMobBannerAdUnitId: String\n        val adMobInterstitialAdUnitId: String\n\n        when (currentPlatform) {\n            Platform.Android -> {\n                adMobAppId = BuildKonfig.ADMOB_ANDROID_APP_ID\n                adMobBannerAdUnitId = BuildKonfig.ADMOB_ANDROID_BANNER_AD_UNIT_ID\n                adMobInterstitialAdUnitId = BuildKonfig.ADMOB_ANDROID_INTERSTITIAL_AD_UNIT_ID\n            }\n\n            Platform.IOS -> {\n                adMobAppId = BuildKonfig.ADMOB_IOS_APP_ID\n                adMobBannerAdUnitId = BuildKonfig.ADMOB_IOS_BANNER_AD_UNIT_ID\n                adMobInterstitialAdUnitId = BuildKonfig.ADMOB_IOS_INTERSTITIAL_AD_UNIT_ID\n            }\n        }\n\n        AppConfig(\n            versionName = BuildKonfig.VERSION_NAME,\n            versionCode = BuildKonfig.VERSION_CODE.toInt(),\n            developerPin = BuildKonfig.DEVELOPER_PIN,\n            purchaseAndroidApiKey = BuildKonfig.PURCHASE_ANDROID_API_KEY.takeIf { it.isNotBlank() },\n            purchaseIosApiKey = BuildKonfig.PURCHASE_IOS_API_KEY.takeIf { it.isNotBlank() },\n            adMobAppId = adMobAppId,\n            adMobBannerAdUnitId = adMobBannerAdUnitId,\n            adMobInterstitialAdUnitId = adMobInterstitialAdUnitId,\n        )\n    }\n\n    includes(appModulePlatform)\n}\n\ninternal expect val appModulePlatform: Module\n",
      "hash": "71de6f6a45dcf772d97bc43fa2207af18106d93d6357a3549697886297036668",
      "size": 2052
    },
    "/composeApp/src/commonMain/kotlin/me/matsumo/grabee/di/Koin.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.di\n\nimport me.matsumo.zencall.core.common.di.commonModule\nimport me.matsumo.zencall.core.datasource.di.dataSourceModule\nimport me.matsumo.zencall.core.repository.di.repositoryModule\nimport me.matsumo.zencall.feature.home.di.homeModule\nimport me.matsumo.zencall.feature.setting.di.settingModule\nimport org.koin.core.KoinApplication\n\nfun KoinApplication.applyModules() {\n    modules(appModule)\n\n    modules(commonModule)\n    modules(dataSourceModule)\n    modules(repositoryModule)\n\n    modules(homeModule)\n    modules(settingModule)\n}\n",
      "hash": "bcb4cc1f9165ca5f0d1c4dbc37be788b20bf6b248044a64b57447c761fbc9b29",
      "size": 554
    },
    "/composeApp/src/iosMain/kotlin/me/matsumo/grabee/Application.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport androidx.compose.animation.Crossfade\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.window.ComposeUIViewController\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport me.matsumo.zencall.core.repository.AppSettingRepository\nimport org.koin.compose.koinInject\nimport kotlin.let\n\n@Suppress(\"FunctionNaming\")\nfun MainViewController() = ComposeUIViewController {\n    val settingRepository = koinInject<AppSettingRepository>()\n    val userData by settingRepository.setting.collectAsStateWithLifecycle(null)\n\n    Crossfade(targetState = userData) { data ->\n        data?.let {\n            GrabeeApp(\n                modifier = Modifier.fillMaxSize(),\n                setting = it,\n            )\n        }\n    }\n}\n",
      "hash": "79370f511f02a3aa129c8aadab8a7e070897aa81fecfc6cedf387077ebfeff2d",
      "size": 867
    },
    "/composeApp/src/iosMain/kotlin/me/matsumo/grabee/InitHelper.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall\n\nimport io.github.aakira.napier.DebugAntilog\nimport io.github.aakira.napier.Napier\nimport me.matsumo.zencall.di.applyModules\nimport org.koin.core.context.startKoin\n\nfun initKoin() {\n    startKoin {\n        applyModules()\n    }\n}\n\nfun initNapier() {\n    Napier.base(DebugAntilog())\n}\n",
      "hash": "1270e46555af9592b025b0ddcc9aac739f50e5cbc750e71574981823b4a4d0ae",
      "size": 308
    },
    "/composeApp/src/iosMain/kotlin/me/matsumo/grabee/di/AppModule.ios.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.di\n\nimport org.koin.core.module.Module\nimport org.koin.dsl.module\n\ninternal actual val appModulePlatform: Module = module {\n    // nothing\n}\n",
      "hash": "32c949bb0901368fb5c20c2873996971be653b2f28a4bd39ed70579f61ba19b3",
      "size": 167
    },
    "/config/detekt/detekt.yml": {
      "type": "content",
      "content": "complexity:\n  active: false\n\ncoroutines:\n  active: true\n\nempty-blocks:\n  active: true\n\nexceptions:\n  active: true\n  TooGenericExceptionCaught:\n    # 認証系ライブラリは Throwable などを既に投げているため無効化\n    active: false\n\nnaming:\n  active: true\n  FunctionNaming:\n    ignoreAnnotated:\n      - 'Composable'\n  MatchingDeclarationName:\n    active: false\n  PackageNaming:\n    active: false\n  TopLevelPropertyNaming:\n    active: false\n\nperformance:\n  active: true\n  SpreadOperator:\n    active: false\n\nstyle:\n  active: true\n  MaxLineLength:\n    active: false\n  MagicNumber:\n    active: false\n  ReturnCount:\n    # 早期 return 数の制限はなくても良さそうなので無効化\n    active: false\n  ThrowsCount:\n    # throw 数の制限はなくても良さそうなので無効化\n    active: false\n  LoopWithTooManyJumpStatements:\n    # break 数の制限はなくても良さそうなので無効化\n    active: false\n  ForbiddenComment:\n    # 開発時のコメントを削除する必要はないので無効化\n    active: false\n  DestructuringDeclarationWithTooManyEntries:\n    # Compose の ConstraintLayout#createRefs などで用いることがあるため無効化\n    active: false\n  # 空のコレクションを表すときは empty... を強制する\n  UseEmptyCounterpart:\n    active: true\n  # プロパティ、メソッド、companion object の順番を強制する\n  ClassOrdering:\n    active: true\n  # 複数行の for, while... は中括弧を強制する\n  MandatoryBracesLoops:\n    active: true\n  UnusedPrivateMember:\n    active: true\n    # Compose の Preview 関数と Test でモックしているものは無効化\n    ignoreAnnotated:\n      - 'RelaxedMockK'\n      - 'InjectMockKs'\n      - 'Preview'\n\npotential-bugs:\n  active: true\n  UnsafeCallOnNullableType:\n    active: false\n\nformatting:\n  active: true\n  autoCorrect: true\n  MaximumLineLength:\n    active: false\n  ArgumentListWrapping:\n    maxLineLength: 999\n  ParameterListWrapping:\n    maxLineLength: 999\n  # ワイルドカードは使用しない\n  NoWildcardImports:\n    active: false\n  # 定義箇所での TrailingComma を強制\n  TrailingCommaOnDeclarationSite:\n    active: true\n  # 呼び出し箇所での TrailingComma を強制\n  TrailingCommaOnCallSite:\n    active: true\n  PackageName:\n    active: false\n  Filename:\n    active: false\n\nTwitterCompose:\n  CompositionLocalAllowlist:\n    active: false\n  active: true\n",
      "hash": "1b68a3a47d0418e82c535666ec942ac149c8117795534caa9b47cda46f07f850",
      "size": 2437,
      "json": {
        "complexity": {
          "active": false
        },
        "coroutines": {
          "active": true
        },
        "empty-blocks": {
          "active": true
        },
        "exceptions": {
          "active": true,
          "TooGenericExceptionCaught": {
            "active": false
          }
        },
        "naming": {
          "active": true,
          "FunctionNaming": {
            "ignoreAnnotated": [
              "Composable"
            ]
          },
          "MatchingDeclarationName": {
            "active": false
          },
          "PackageNaming": {
            "active": false
          },
          "TopLevelPropertyNaming": {
            "active": false
          }
        },
        "performance": {
          "active": true,
          "SpreadOperator": {
            "active": false
          }
        },
        "style": {
          "active": true,
          "MaxLineLength": {
            "active": false
          },
          "MagicNumber": {
            "active": false
          },
          "ReturnCount": {
            "active": false
          },
          "ThrowsCount": {
            "active": false
          },
          "LoopWithTooManyJumpStatements": {
            "active": false
          },
          "ForbiddenComment": {
            "active": false
          },
          "DestructuringDeclarationWithTooManyEntries": {
            "active": false
          },
          "UseEmptyCounterpart": {
            "active": true
          },
          "ClassOrdering": {
            "active": true
          },
          "MandatoryBracesLoops": {
            "active": true
          },
          "UnusedPrivateMember": {
            "active": true,
            "ignoreAnnotated": [
              "RelaxedMockK",
              "InjectMockKs",
              "Preview"
            ]
          }
        },
        "potential-bugs": {
          "active": true,
          "UnsafeCallOnNullableType": {
            "active": false
          }
        },
        "formatting": {
          "active": true,
          "autoCorrect": true,
          "MaximumLineLength": {
            "active": false
          },
          "ArgumentListWrapping": {
            "maxLineLength": 999
          },
          "ParameterListWrapping": {
            "maxLineLength": 999
          },
          "NoWildcardImports": {
            "active": false
          },
          "TrailingCommaOnDeclarationSite": {
            "active": true
          },
          "TrailingCommaOnCallSite": {
            "active": true
          },
          "PackageName": {
            "active": false
          },
          "Filename": {
            "active": false
          }
        },
        "TwitterCompose": {
          "CompositionLocalAllowlist": {
            "active": false
          },
          "active": true
        }
      }
    },
    "/core/common/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.core.common\"\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            api(project.dependencies.platform(libs.koin.bom))\n\n            api(libs.bundles.infra)\n            api(libs.bundles.koin)\n        }\n\n        androidMain.dependencies {\n            api(project.dependencies.platform(libs.firebase.bom))\n\n            api(libs.bundles.firebase)\n            api(libs.koin.android)\n        }\n    }\n}\n",
      "hash": "9f7b8e7ecde58a8a218cf2b0961b1767a6d64091159dde086ad778da30f5c754",
      "size": 667
    },
    "/core/common/src/commonMain/kotlin/me/matsumo/grabee/core/common/Formatter.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.common\n\nimport kotlinx.serialization.json.Json\n\nval formatter = Json {\n    isLenient = true\n    prettyPrint = true\n    ignoreUnknownKeys = true\n    coerceInputValues = true\n    encodeDefaults = true\n    explicitNulls = false\n}\n",
      "hash": "088cf045a027c5b2751d7fe193b13ecb1a08c8f19782e22ff4cb60368bafa613",
      "size": 258
    },
    "/core/common/src/commonMain/kotlin/me/matsumo/grabee/core/common/di/CommonModule.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.common.di\n\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.IO\nimport me.matsumo.zencall.core.common.formatter\nimport org.koin.dsl.module\n\nval commonModule = module {\n    single { formatter }\n    single<CoroutineDispatcher> { Dispatchers.IO }\n}\n",
      "hash": "aa522aacb7ecef31760834a8d2bef6bdb261a1a9f3887ce85e88bc371dd06552",
      "size": 336
    },
    "/core/common/src/commonMain/kotlin/me/matsumo/grabee/core/common/serializer/ColorSerializer.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.common.serializer\n\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.toArgb\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.descriptors.PrimitiveKind\nimport kotlinx.serialization.descriptors.PrimitiveSerialDescriptor\nimport kotlinx.serialization.descriptors.SerialDescriptor\nimport kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.encoding.Encoder\n\nobject ColorSerializer : KSerializer<Color> {\n    override val descriptor: SerialDescriptor =\n        PrimitiveSerialDescriptor(\"Color\", PrimitiveKind.INT)\n\n    override fun serialize(encoder: Encoder, value: Color) {\n        encoder.encodeInt(value.toArgb())\n    }\n\n    override fun deserialize(decoder: Decoder) = Color(decoder.decodeInt())\n}\n",
      "hash": "7d89a1f2020e29b67d82dbb3c254594254e63ef786ba9e8e42f69fe1ca77c946",
      "size": 794
    },
    "/core/common/src/commonMain/kotlin/me/matsumo/grabee/core/common/serializer/InstantSerializer.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.common.serializer\n\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.descriptors.PrimitiveKind\nimport kotlinx.serialization.descriptors.PrimitiveSerialDescriptor\nimport kotlinx.serialization.descriptors.SerialDescriptor\nimport kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.encoding.Encoder\nimport kotlin.time.ExperimentalTime\nimport kotlin.time.Instant\n\n@OptIn(ExperimentalTime::class)\nobject InstantSerializer : KSerializer<Instant> {\n    override val descriptor: SerialDescriptor = PrimitiveSerialDescriptor(\"Instant\", PrimitiveKind.LONG)\n\n    override fun serialize(encoder: Encoder, value: Instant) {\n        encoder.encodeLong(value.toEpochMilliseconds())\n    }\n\n    override fun deserialize(decoder: Decoder): Instant {\n        return Instant.fromEpochMilliseconds(decoder.decodeLong())\n    }\n}\n",
      "hash": "041cd1a656a5fd7c0cf29d1a21deb973d8476051d41268c4fe9962701a69b377",
      "size": 874
    },
    "/core/datasource/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.core.datasource\"\n}\n\nkotlin {\n    sourceSets {\n        androidMain.dependencies {\n            implementation(libs.androidx.datastore)\n            implementation(libs.androidx.datastore.proto)\n        }\n\n        commonMain.dependencies {\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:model\"))\n            implementation(project(\":core:resource\"))\n\n            api(libs.bundles.filekit)\n            api(libs.androidx.datastore.preferences)\n        }\n    }\n}\n",
      "hash": "20ac3bf521421381d098bb944db644482b6badcca3d299df5afeb2ab0585d919",
      "size": 755
    },
    "/core/datasource/src/androidMain/kotlin/me/matsumo/grabee/core/datasource/di/DataSourceModule.android.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource.di\n\nimport me.matsumo.zencall.core.datasource.helper.PreferenceHelper\nimport me.matsumo.zencall.core.datasource.helper.PreferenceHelperImpl\nimport org.koin.core.module.Module\nimport org.koin.dsl.module\n\ninternal actual val dataSourcePlatformModule: Module = module {\n    single<PreferenceHelper> {\n        PreferenceHelperImpl(\n            context = get(),\n            ioDispatcher = get(),\n        )\n    }\n}\n",
      "hash": "72c6e487d83653d9372c2ebc0519f4ac98456e6997d03147fa9981817c295b32",
      "size": 449
    },
    "/core/datasource/src/androidMain/kotlin/me/matsumo/grabee/core/datasource/helper/PreferenceHelper.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource.helper\n\nimport android.content.Context\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.PreferenceDataStoreFactory\nimport androidx.datastore.preferences.core.Preferences\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.CoroutineScope\nimport okio.Path.Companion.toPath\n\nclass PreferenceHelperImpl(\n    private val context: Context,\n    private val ioDispatcher: CoroutineDispatcher,\n) : PreferenceHelper {\n\n    override fun create(name: String): DataStore<Preferences> {\n        val file = context.filesDir.resolve(\"$name.preferences_pb\")\n\n        return PreferenceDataStoreFactory.createWithPath(\n            corruptionHandler = null,\n            migrations = emptyList(),\n            scope = CoroutineScope(ioDispatcher),\n            produceFile = { file.absolutePath.toPath() },\n        )\n    }\n\n    override fun delete(name: String) {\n        // do nothing\n    }\n}\n",
      "hash": "bf1d95d53cdf3a32f346bfda663b8c77f6502c297bf8d8efa18c0ff6c7e2f795",
      "size": 968
    },
    "/core/datasource/src/commonMain/kotlin/me/matsumo/grabee/core/datasource/AppSettingDataSource.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource\n\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.toArgb\nimport androidx.datastore.preferences.core.booleanPreferencesKey\nimport androidx.datastore.preferences.core.edit\nimport androidx.datastore.preferences.core.intPreferencesKey\nimport androidx.datastore.preferences.core.stringPreferencesKey\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.first\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.withContext\nimport kotlinx.serialization.json.Json\nimport me.matsumo.zencall.core.datasource.helper.PreferenceHelper\nimport me.matsumo.zencall.core.datasource.helper.deserialize\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.model.Theme\n\nclass AppSettingDataSource(\n    private val preferenceHelper: PreferenceHelper,\n    private val formatter: Json,\n    private val ioDispatcher: CoroutineDispatcher,\n) {\n    private val preference = preferenceHelper.create(PreferencesName.SETTING)\n\n    val setting = preference.data.map {\n        it.deserialize(formatter, AppSetting.serializer(), AppSetting.DEFAULT)\n    }.stateIn(\n        scope = CoroutineScope(ioDispatcher),\n        started = SharingStarted.WhileSubscribed(1000),\n        initialValue = AppSetting.DEFAULT,\n    )\n\n    suspend fun setId(id: String) = withContext(ioDispatcher) {\n        if (setting.first().id == id) return@withContext\n\n        preference.edit {\n            it[stringPreferencesKey(AppSetting::id.name)] = id\n        }\n    }\n\n    suspend fun setTheme(theme: Theme) = withContext(ioDispatcher) {\n        if (setting.first().theme == theme) return@withContext\n\n        preference.edit {\n            it[stringPreferencesKey(AppSetting::theme.name)] = theme.name\n        }\n    }\n\n    suspend fun setUseDynamicColor(useDynamicColor: Boolean) = withContext(ioDispatcher) {\n        if (setting.first().useDynamicColor == useDynamicColor) return@withContext\n\n        preference.edit {\n            it[booleanPreferencesKey(AppSetting::useDynamicColor.name)] = useDynamicColor\n        }\n    }\n\n    suspend fun setSeedColor(color: Color) = withContext(ioDispatcher) {\n        if (setting.first().seedColor == color) return@withContext\n\n        preference.edit {\n            it[intPreferencesKey(AppSetting::seedColor.name)] = color.toArgb()\n        }\n    }\n\n    suspend fun setPlusMode(plusMode: Boolean) = withContext(ioDispatcher) {\n        if (setting.first().plusMode == plusMode) return@withContext\n\n        preference.edit {\n            it[booleanPreferencesKey(AppSetting::plusMode.name)] = plusMode\n        }\n    }\n\n    suspend fun setDeveloperMode(developerMode: Boolean) = withContext(ioDispatcher) {\n        if (setting.first().developerMode == developerMode) return@withContext\n\n        preference.edit {\n            it[booleanPreferencesKey(AppSetting::developerMode.name)] = developerMode\n        }\n    }\n}\n",
      "hash": "ff29f12b6e8e5c1df0cea4fc34d04ee685776d0cff61af4e77e7b016f0014866",
      "size": 3047
    },
    "/core/datasource/src/commonMain/kotlin/me/matsumo/grabee/core/datasource/PreferencesName.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource\n\nobject PreferencesName {\n    const val SETTING = \"setting\"\n}\n",
      "hash": "85dccc32eddec5aa114872bd59fd5b57457ac2f3bed7db129ad6b673634006af",
      "size": 104
    },
    "/core/datasource/src/commonMain/kotlin/me/matsumo/grabee/core/datasource/di/DataSourceModule.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource.di\n\nimport me.matsumo.zencall.core.datasource.AppSettingDataSource\nimport org.koin.core.module.Module\nimport org.koin.core.module.dsl.singleOf\nimport org.koin.dsl.module\n\nval dataSourceModule = module {\n    singleOf(::AppSettingDataSource)\n\n    includes(dataSourcePlatformModule)\n}\n\ninternal expect val dataSourcePlatformModule: Module\n",
      "hash": "2dc3951e289eea3595d9d49866e34331be6fda2a03abbe783bab6064f3b59b3f",
      "size": 377
    },
    "/core/datasource/src/commonMain/kotlin/me/matsumo/grabee/core/datasource/helper/PreferenceHelper.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource.helper\n\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.Preferences\nimport io.github.aakira.napier.Napier\nimport kotlinx.serialization.ExperimentalSerializationApi\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.json.JsonObject\nimport kotlinx.serialization.json.JsonPrimitive\nimport kotlinx.serialization.json.buildJsonObject\nimport kotlinx.serialization.json.jsonObject\nimport kotlin.collections.iterator\n\ninterface PreferenceHelper {\n    fun create(name: String): DataStore<Preferences>\n    fun delete(name: String)\n}\n\n@OptIn(ExperimentalSerializationApi::class)\nfun <T> Preferences.deserialize(\n    formatter: Json,\n    serializer: KSerializer<T>,\n    defaultValue: T,\n): T {\n    return try {\n        val parsedPrefMap: Map<String, JsonElement> = buildMap {\n            for ((k, vAny) in this@deserialize.asMap()) {\n                val key = k.name\n                val elem: JsonElement = when (val v = vAny) {\n                    is String -> {\n                        // JSON 文字列（{...} or [...]）は parse、通常文字列は Primitive\n                        if (v.startsWith(\"{\") && v.endsWith(\"}\") || v.startsWith(\"[\") && v.endsWith(\"]\")) {\n                            formatter.parseToJsonElement(v)\n                        } else {\n                            JsonPrimitive(v)\n                        }\n                    }\n\n                    is Int -> JsonPrimitive(v)\n                    is Long -> JsonPrimitive(v)\n                    is Float -> JsonPrimitive(v)\n                    is Double -> JsonPrimitive(v)\n                    is Boolean -> JsonPrimitive(v)\n                    else -> JsonPrimitive(v.toString())\n                }\n                put(key, elem)\n            }\n        }\n\n        val defaultData = formatter.encodeToJsonElement(serializer, defaultValue).jsonObject\n        val preferenceData = JsonObject(parsedPrefMap)\n\n        val data = buildJsonObject {\n            // デフォルトをベースにしつつ、Prefs を上書き\n            for ((k, v) in defaultData) put(k, v)\n            for ((k, v) in preferenceData) put(k, v)\n        }\n\n        formatter.decodeFromJsonElement(serializer, data)\n    } catch (e: Exception) {\n        Napier.e(\"Failed to deserialize.\", e)\n        defaultValue\n    }\n}\n",
      "hash": "c020e6f036f006efc20f2420b2b3d0bc67ccb4c1af40fa596c16f936ed3e2654",
      "size": 2444
    },
    "/core/datasource/src/iosMain/kotlin/me/matsumo/grabee/core/datasource/di/DataSourceModule.ios.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource.di\n\nimport me.matsumo.zencall.core.datasource.helper.PreferenceHelper\nimport me.matsumo.zencall.core.datasource.helper.PreferenceHelperImpl\nimport org.koin.core.module.Module\nimport org.koin.dsl.module\n\ninternal actual val dataSourcePlatformModule: Module = module {\n    single<PreferenceHelper> {\n        PreferenceHelperImpl(\n            ioDispatcher = get(),\n        )\n    }\n}\n",
      "hash": "abb8594bc8efeff0f32eeecdcf9da23c010bf088b6876c49b0b2ef0d5f0cbdf8",
      "size": 420
    },
    "/core/datasource/src/iosMain/kotlin/me/matsumo/grabee/core/datasource/helper/PreferenceHelper.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.datasource.helper\n\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.PreferenceDataStoreFactory\nimport androidx.datastore.preferences.core.Preferences\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.CoroutineScope\nimport okio.Path.Companion.toPath\nimport platform.Foundation.NSDocumentDirectory\nimport platform.Foundation.NSFileManager\nimport platform.Foundation.NSUserDomainMask\n\nclass PreferenceHelperImpl(\n    private val ioDispatcher: CoroutineDispatcher,\n) : PreferenceHelper {\n\n    @OptIn(ExperimentalForeignApi::class)\n    override fun create(name: String): DataStore<Preferences> {\n        val documentDir = NSFileManager.defaultManager.URLForDirectory(\n            directory = NSDocumentDirectory,\n            inDomain = NSUserDomainMask,\n            appropriateForURL = null,\n            create = false,\n            error = null,\n        )\n\n        return PreferenceDataStoreFactory.createWithPath(\n            corruptionHandler = null,\n            migrations = emptyList(),\n            scope = CoroutineScope(ioDispatcher),\n            produceFile = { \"${documentDir!!.path}/$name.preferences_pb\".toPath() },\n        )\n    }\n\n    override fun delete(name: String) {\n        // do nothing\n    }\n}\n",
      "hash": "78c3b9b57b4a3f760e975e274e9e5ab3553e941f39b74ce997ae9cd191b4294f",
      "size": 1343
    },
    "/core/model/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.core.model\"\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:resource\"))\n\n            implementation(libs.ktor.core)\n        }\n    }\n}\n",
      "hash": "3826180a5615ad0d23ed4f22c393ed07ac6755a74837fddc11b6e5a01956c847",
      "size": 495
    },
    "/core/model/src/androidMain/kotlin/me/matsumo/grabee/core/model/Platform.android.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\nactual val currentPlatform: Platform = Platform.Android\n",
      "hash": "929c0b7588a70e165b810f216a90a65603c16ca8459be13c74e7ab58b01c6484",
      "size": 94
    },
    "/core/model/src/commonMain/kotlin/me/matsumo/grabee/core/model/AppConfig.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\ndata class AppConfig(\n    val versionName: String,\n    val versionCode: Int,\n    val developerPin: String,\n    val adMobAppId: String,\n    val adMobInterstitialAdUnitId: String,\n    val adMobBannerAdUnitId: String,\n    val purchaseAndroidApiKey: String?,\n    val purchaseIosApiKey: String?,\n)\n",
      "hash": "4bb3ef0b5538a7f83566a1cdb49dc929bfa8023a2856f9312898029fcbe959d8",
      "size": 331
    },
    "/core/model/src/commonMain/kotlin/me/matsumo/grabee/core/model/AppSetting.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\nimport androidx.compose.ui.graphics.Color\nimport kotlinx.serialization.Serializable\nimport me.matsumo.zencall.core.common.serializer.ColorSerializer\n\n@Serializable\ndata class AppSetting(\n    val id: String,\n    val theme: Theme,\n    val useDynamicColor: Boolean,\n    @Serializable(with = ColorSerializer::class)\n    val seedColor: Color,\n    val plusMode: Boolean,\n    val developerMode: Boolean,\n) {\n    val hasPrivilege get() = plusMode || developerMode\n\n    companion object {\n        val DEFAULT = AppSetting(\n            id = \"\",\n            theme = Theme.System,\n            useDynamicColor = currentPlatform == Platform.Android,\n            seedColor = Color(0xFF7FD0FF),\n            plusMode = false,\n            developerMode = false,\n        )\n    }\n}\n",
      "hash": "a5754823fd6725706e8aa287eb18de98c931ff47659a27408540276bfadf22a0",
      "size": 799
    },
    "/core/model/src/commonMain/kotlin/me/matsumo/grabee/core/model/Destination.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\nimport kotlinx.serialization.Serializable\n\n@Serializable\nsealed interface Destination {\n    @Serializable\n    data object Home : Destination\n\n    @Serializable\n    sealed interface Setting : Destination {\n        @Serializable\n        data object Root : Setting\n\n        @Serializable\n        data object License : Setting\n    }\n}\n",
      "hash": "7060a5d4c418131e1efe1ba12a60a1ecd1a22ec2310601efcbc10068e50a5352",
      "size": 369
    },
    "/core/model/src/commonMain/kotlin/me/matsumo/grabee/core/model/Platform.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\nexpect val currentPlatform: Platform\n\nenum class Platform {\n    Android,\n    IOS,\n}\n",
      "hash": "6f541619dbdd1f145b71ea97d6dc74505fd021314fb0b01cdc5f71b540cfb118",
      "size": 122
    },
    "/core/model/src/commonMain/kotlin/me/matsumo/grabee/core/model/Theme.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\nenum class Theme {\n    System, Light, Dark,\n}\n",
      "hash": "d5097908252f19eb3321e6e10934daa6735eb0bb5a1fb97c4682e71e951b9200",
      "size": 84
    },
    "/core/model/src/iosMain/kotlin/me/matsumo/grabee/core/model/Platform.ios.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.model\n\nactual val currentPlatform: Platform = Platform.IOS\n",
      "hash": "bf8a814d79aa48bb8e586e22b82c0ea00e124ecf8c121fdd0eb0c1fc2140914b",
      "size": 90
    },
    "/core/repository/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.core.repository\"\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":core:model\"))\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:datasource\"))\n            implementation(project(\":core:resource\"))\n\n            implementation(libs.bundles.ktor)\n        }\n\n        androidMain.dependencies {\n            api(libs.ktor.okhttp)\n        }\n\n        iosMain.dependencies {\n            api(libs.ktor.darwin)\n        }\n    }\n}\n",
      "hash": "15405b2e46ea8310d6cbb4450d2cac94de9047a9d8f183ebbcee347c8ae7aacc",
      "size": 766
    },
    "/core/repository/src/commonMain/kotlin/me/matsumo/grabee/core/repository/AppSettingRepository.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.repository\n\nimport androidx.compose.ui.graphics.Color\nimport kotlinx.coroutines.flow.StateFlow\nimport me.matsumo.zencall.core.datasource.AppSettingDataSource\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.model.Theme\n\nclass AppSettingRepository(\n    private val dataSource: AppSettingDataSource,\n) {\n    val setting: StateFlow<AppSetting> = dataSource.setting\n\n    suspend fun setId(id: String) = dataSource.setId(id)\n\n    suspend fun setTheme(theme: Theme) = dataSource.setTheme(theme)\n\n    suspend fun setUseDynamicColor(useDynamicColor: Boolean) = dataSource.setUseDynamicColor(useDynamicColor)\n\n    suspend fun setSeedColor(color: Color) = dataSource.setSeedColor(color)\n\n    suspend fun setPlusMode(plusMode: Boolean) = dataSource.setPlusMode(plusMode)\n\n    suspend fun setDeveloperMode(developerMode: Boolean) = dataSource.setDeveloperMode(developerMode)\n}\n",
      "hash": "9f12718523f4bac1bb41b885004cf994cd89f54d54731c35efdb9c8f048bc987",
      "size": 923
    },
    "/core/repository/src/commonMain/kotlin/me/matsumo/grabee/core/repository/di/RepositoryModule.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.repository.di\n\nimport me.matsumo.zencall.core.repository.AppSettingRepository\nimport org.koin.core.module.dsl.singleOf\nimport org.koin.dsl.module\n\nval repositoryModule = module {\n    singleOf(::AppSettingRepository)\n}\n",
      "hash": "a309ed990ac92bd6d4f82107250fe8414f0466532e25898af28862d5f3e4a2fa",
      "size": 248
    },
    "/core/resource/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.compose\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.core.resource\"\n}\n\ncompose.resources {\n    publicResClass = true\n    packageOfResClass = \"me.matsumo.zencall.core.resource\"\n    generateResClass = always\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            api(compose.components.resources)\n        }\n    }\n}\n",
      "hash": "ae3dfc23c7a6c9c20b7985104669fcc8201d06eb51b9a5f43718b86859e86b49",
      "size": 571
    },
    "/core/resource/src/commonMain/composeResources/values/strings.xml": {
      "type": "content",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <!-- Common -->\n    <string name=\"common_ok\">OK</string>\n    <string name=\"common_cancel\">キャンセル</string>\n    <string name=\"common_apply\">適用</string>\n    <string name=\"common_allow\">許可</string>\n    <string name=\"common_denied\">拒否</string>\n    <string name=\"common_retry\">再試行</string>\n    <string name=\"common_reload\">再読み込み</string>\n    <string name=\"common_back\">戻る</string>\n    <string name=\"common_close\">閉じる</string>\n    <string name=\"common_next\">次へ</string>\n    <string name=\"common_finish\">完了</string>\n    <string name=\"common_skip\">スキップ</string>\n    <string name=\"common_loading\">処理中…</string>\n    <string name=\"common_caution\">注意</string>\n    <string name=\"common_error\">エラー</string>\n    <string name=\"common_warning\">警告</string>\n    <string name=\"common_save\">保存</string>\n    <string name=\"common_unknown\">不明</string>\n    <string name=\"common_details\">詳細</string>\n    <string name=\"common_delete\">削除</string>\n    <string name=\"common_completed\">完了</string>\n\n    <!-- Common Error -->\n    <string name=\"error_executed\">エラーが発生しました</string>\n    <string name=\"error_unknown\">不明なエラーが発生しました</string>\n    <string name=\"error_download\">ダウンロードに失敗しました</string>\n    <string name=\"error_no_data\">データがありません</string>\n    <string name=\"error_network\">通信エラーが発生しました</string>\n    <string name=\"error_network_description\">通信環境をご確認の上、再度お試しください</string>\n    <string name=\"error_paging\">ページネーションを継続できません</string>\n    <string name=\"error_developing_feature\">開発中の機能です</string>\n    <string name=\"error_billing\">購入情報を取得できませんでした</string>\n    <string name=\"error_ad_load_failed\">広告の読み込みに失敗しました</string>\n    <string name=\"error_ad_load_failed_description\">サービスの品質維持のために広告を表示しています。</string>\n    <string name=\"error_no_available_this_device\">このデバイスでは利用できない機能です</string>\n\n    <!-- Common Unit -->\n    <string name=\"unit_day_before\">%1$d日前</string>\n    <string name=\"unit_hour_before\">%1$d時間前</string>\n    <string name=\"unit_minute_before\">%1$d分前</string>\n    <string name=\"unit_second_before\">%1$d秒前</string>\n    <string name=\"unit_favorite\">%1$dいいね</string>\n    <string name=\"unit_tag\">%1$d件</string>\n    <string name=\"unit_jpy\">￥%1$d</string>\n    <string name=\"unit_year\">年</string>\n    <string name=\"unit_month\">月</string>\n    <string name=\"unit_day\">日</string>\n    <string name=\"unit_sheet\">枚</string>\n\n    <!-- Home -->\n    <string name=\"home_title\">証明写真</string>\n    <string name=\"home_menu_camera\">カメラ</string>\n    <string name=\"home_menu_album\">アルバム</string>\n    <string name=\"home_menu_setting\">設定</string>\n    <string name=\"home_menu_history\">履歴</string>\n    <string name=\"home_buy_plus_button\">広告を削除</string>\n    <string name=\"home_purchase_expired\">プラン失効</string>\n    <string name=\"home_purchase_expired_description\">プランが失効したため、通常ユーザーに戻りました。\\n\\n意図していない場合は支払いに失敗している可能性があります。ストアアプリより、プランの状況をご確認ください。</string>\n\n    <!-- Billing -->\n    <string name=\"billing_title\">Buy Plus+</string>\n    <string name=\"billing_message\">Grabee+ は、月々コーヒー一杯程度の金額で全ての機能にアクセスできるようになる、特別なプランです。</string>\n    <string name=\"billing_plan_monthly\">通常プラン</string>\n    <string name=\"billing_plan_annual\">年間プラン</string>\n    <string name=\"billing_purchase_button\">%1$s / %2$sで購入</string>\n    <string name=\"billing_purchase_restore_button\">購入を復元</string>\n    <string name=\"billing_purchase_consume_button\">購入を消費</string>\n    <string name=\"billing_caution1\">※ Plus+ は上記の限定機能を追加する定期購入契約です。支払いは直ちに行われ、機能を利用し続けるには指定された期間ごとの更新が必要となります。解約はいつでも可能です。</string>\n    <string name=\"billing_caution2\">※ アプリ利用開始時に利用規約とプライバシーポリシーにすでに同意されていますが、設定画面から再度ご確認ください。</string>\n    <string name=\"billing_message_purchased_success\">購入成功</string>\n    <string name=\"billing_message_purchased_success_description\">購入が完了しました。\\n支援ありがとうございます！</string>\n    <string name=\"billing_message_purchased_error\">購入に失敗しました</string>\n    <string name=\"billing_message_restore_error\">購入情報が見つかりませんでした</string>\n    <string name=\"billing_item_hide_ads\">広告を非表示</string>\n    <string name=\"billing_item_hide_ads_description\">アプリ内の広告を全て非表示にし、もっと快適に投稿を楽しめる！</string>\n    <string name=\"billing_item_widget\">ホームウィジェット</string>\n    <string name=\"billing_item_widget_description\">ホーム画面にウィジェットを追加し、ホームから投稿をチェックできる！（アップデートで提供予定）</string>\n    <string name=\"billing_item_material_you\">Material You</string>\n    <string name=\"billing_item_material_you_description\">全てのバージョンで Material You によるカスタムテーマで自分好みにカスタマイズ！</string>\n    <string name=\"billing_item_accent_color\">アクセントカラー</string>\n    <string name=\"billing_item_accent_color_description\">アプリのアクセントカラーを自由に設定！。</string>\n    <string name=\"billing_item_feature\">新機能の追加</string>\n    <string name=\"billing_item_feature_description\">新機能が追加された際にいち早く体験！</string>\n    <string name=\"billing_item_support\">最優先サポート</string>\n    <string name=\"billing_item_support_description\">いつでも最優先でサポート！</string>\n    <string name=\"billing_purchase_completed_title\">支援完了</string>\n    <string name=\"billing_purchase_completed_message\">購入が完了しました。\\n支援ありがとうございます！</string>\n    <string name=\"billing_cancel_title\">プランの解約</string>\n    <string name=\"billing_cancel_message\">プランが解約されたため、通常ユーザーに戻りました。\\n\\n意図していない場合は支払いに失敗している可能性があります。ストアアプリより、プランの状況をご確認ください。</string>\n\n    <!-- Setting -->\n    <string name=\"setting_title\">設定</string>\n    <string name=\"setting_theme\">テーマ</string>\n    <string name=\"setting_theme_app\">アプリのテーマ</string>\n    <string name=\"setting_theme_app_description\">アプリのテーマカラーを選択してください。</string>\n    <string name=\"setting_theme_app_auto\">System</string>\n    <string name=\"setting_theme_app_light\">Light</string>\n    <string name=\"setting_theme_app_dark\">Dark</string>\n    <string name=\"setting_dynamic_color\">ダイナミックカラー</string>\n    <string name=\"setting_dynamic_color_description\">アプリのプライマリカラーを選択してください。</string>\n    <string name=\"setting_dynamic_color_system\">Your System</string>\n    <string name=\"setting_dynamic_color_user\">User Picked</string>\n    <string name=\"setting_general\">一般</string>\n    <string name=\"setting_information\">情報</string>\n    <string name=\"setting_information_app_id\">アプリID</string>\n    <string name=\"setting_information_app_version\">アプリバージョン</string>\n    <string name=\"setting_other\">その他</string>\n    <string name=\"setting_other_team_of_service\">利用規約</string>\n    <string name=\"setting_other_privacy_policy\">プライバシーポリシー</string>\n    <string name=\"setting_other_open_source_license\">オープンソースライセンス</string>\n    <string name=\"setting_other_open_source_license_description\">OSSライブラリのライセンスを表示します。</string>\n    <string name=\"setting_other_developer_mode\">開発モード</string>\n    <string name=\"setting_other_developer_mode_description\">[Warning] Do not enable this mode if you are not a developer.</string>\n    <string name=\"setting_other_developer_mode_dialog_title\">Developer Mode</string>\n    <string name=\"setting_other_developer_mode_dialog_description\">You are trying to turn on this mode.Please enter the developer's PIN.\\n\\n[Warning] When this mode is turned on, you will not be able to receive any support.</string>\n</resources>\n",
      "hash": "31bf779051282c274253035093fe4d23230cc56bc07b035bbb7a3f6e448cad4d",
      "size": 8997
    },
    "/core/ui/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.compose\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.core.ui\"\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":core:model\"))\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:repository\"))\n            implementation(project(\":core:datasource\"))\n            implementation(project(\":core:resource\"))\n\n            api(libs.bundles.ui.common)\n            api(libs.bundles.calf)\n\n            api(compose.runtime)\n            api(compose.runtimeSaveable)\n            api(compose.foundation)\n            api(compose.animation)\n            api(compose.animationGraphics)\n            api(compose.material)\n            api(compose.material3)\n            api(compose.ui)\n            api(compose.materialIconsExtended)\n            api(compose.components.uiToolingPreview)\n\n            api(libs.adaptive)\n            api(libs.adaptive.layout)\n            api(libs.adaptive.navigation)\n        }\n\n        androidMain.dependencies {\n            api(libs.bundles.ui.android)\n            api(libs.play.service.ads)\n        }\n    }\n}\n",
      "hash": "b7e7e614a0afc3afc682039b14af96da6d0b558dfc8455d62e63ad037054521b",
      "size": 1351
    },
    "/core/ui/src/androidMain/kotlin/me/matsumo/grabee/core/ui/utils/ColorUtils.android.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.utils\n\nimport android.os.Build\nimport androidx.compose.material3.ColorScheme\nimport androidx.compose.material3.dynamicDarkColorScheme\nimport androidx.compose.material3.dynamicLightColorScheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport com.materialkolor.rememberDynamicColorScheme\n\n@Composable\nactual fun rememberColorScheme(\n    useDynamicColor: Boolean,\n    seedColor: Color,\n    isDark: Boolean,\n): ColorScheme {\n    val context = LocalContext.current\n\n    return if (useDynamicColor && isSupportDynamicColor) {\n        if (isDark) {\n            dynamicDarkColorScheme(context)\n        } else {\n            dynamicLightColorScheme(context)\n        }\n    } else {\n        rememberDynamicColorScheme(\n            seedColor = seedColor,\n            isDark = isDark,\n        )\n    }\n}\n\nactual val isSupportDynamicColor: Boolean = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\n",
      "hash": "8d548d537534cf5e26b57e0608ce29f92254cec79cdeb15e80598771a049f9e9",
      "size": 1009
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/AsyncLoadContents.kt": {
      "type": "content",
      "content": "@file:Suppress(\"ModifierReused\")\n\npackage me.matsumo.zencall.core.ui.screen\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.togetherWith\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport me.matsumo.zencall.core.ui.screen.view.ErrorView\nimport me.matsumo.zencall.core.ui.screen.view.LoadingView\n\n@Composable\nfun <T> AsyncLoadContents(\n    screenState: ScreenState<T>,\n    modifier: Modifier = Modifier,\n    containerColor: Color = MaterialTheme.colorScheme.surface,\n    cornerShape: RoundedCornerShape = RoundedCornerShape(0.dp),\n    retryAction: (() -> Unit)? = null,\n    terminate: (() -> Unit)? = null,\n    content: @Composable (T) -> Unit,\n) {\n    AnimatedContent(\n        modifier = modifier\n            .clip(cornerShape)\n            .background(containerColor),\n        targetState = screenState,\n        transitionSpec = { fadeIn().togetherWith(fadeOut()) },\n        contentKey = { it::class.simpleName },\n        label = \"AsyncLoadContents\",\n    ) { state ->\n        when (state) {\n            is ScreenState.Idle -> {\n                content.invoke(state.data)\n            }\n\n            is ScreenState.Loading -> {\n                LoadingView(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .background(Color.Black.copy(alpha = 0.2f)),\n                )\n            }\n\n            is ScreenState.Error -> {\n                ErrorView(\n                    modifier = Modifier.fillMaxWidth(),\n                    errorState = state,\n                    retryAction = retryAction,\n                    terminate = terminate,\n                )\n            }\n        }\n    }\n}\n",
      "hash": "e97379d0adb0c82f7d806f65c6c0d315fdd246d069704e52ef9dfeb9ccafaba6",
      "size": 2113
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/ScreenState.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.screen\n\nimport androidx.compose.runtime.Stable\nimport org.jetbrains.compose.resources.StringResource\n\n@Stable\nsealed class ScreenState<out T> {\n    data object Loading : ScreenState<Nothing>()\n\n    data class Error(\n        val message: StringResource,\n        val retryTitle: StringResource? = null,\n    ) : ScreenState<Nothing>()\n\n    data class Idle<T>(\n        var data: T,\n    ) : ScreenState<T>()\n}\n",
      "hash": "2a289f9a0efb0aeca40e7feea3c0ab7d2b7b0968574c8d06fe26ce56098eb688",
      "size": 439
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/view/ColorSlider.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.screen.view\n\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.focusable\nimport androidx.compose.foundation.gestures.detectDragGestures\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.CornerRadius\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.semantics.ProgressBarRangeInfo\nimport androidx.compose.ui.semantics.progressBarRangeInfo\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport kotlin.math.max\nimport kotlin.math.min\n\n@Composable\nfun ColorSlider(\n    color: Color?,\n    onColorChanged: (Color) -> Unit,\n    modifier: Modifier = Modifier,\n    trackHeight: Dp = 20.dp,\n    knobRadius: Dp = 16.dp,\n    enabled: Boolean = true,\n) {\n    val trackStops = remember {\n        listOf(Color.White) +\n            List(13) { i -> Color.hsv(i * 30f, 1f, 1f) } +\n            listOf(Color.White)\n    }\n    val trackBrush = remember { Brush.horizontalGradient(trackStops) }\n    val currentNorm = remember(color) {\n        when (color) {\n            null -> 0f\n            Color.White -> 1f\n            else -> color.hue360() / 360f\n        }\n    }\n\n    val animatedPos by animateFloatAsState(\n        targetValue = currentNorm,\n        label = \"slider_pos\",\n    )\n\n    val density = LocalDensity.current\n    val knobRadiusPx = with(density) { knobRadius.toPx() }\n\n    Box(\n        modifier\n            .requiredHeight(trackHeight)\n            .semantics(mergeDescendants = true) {\n                progressBarRangeInfo = ProgressBarRangeInfo(\n                    current = currentNorm,\n                    range = 0f..1f,\n                )\n            }\n            .focusable(enabled)\n            .pointerInput(enabled) {\n                if (!enabled) return@pointerInput\n                detectTapGestures { offset ->\n                    val newNorm = (offset.x / size.width).coerceIn(0f, 0.99f)\n                    val newColor = when {\n                        newNorm <= 0f -> Color.White\n                        newNorm >= 1f -> Color.White\n                        else -> Color.hsv(\n                            hue = newNorm * 360f,\n                            saturation = 1f,\n                            value = 1f,\n                        )\n                    }\n                    onColorChanged(newColor)\n                }\n            }\n            .pointerInput(enabled) {\n                if (!enabled) return@pointerInput\n                detectDragGestures { change, _ ->\n                    val newNorm = (change.position.x / size.width).coerceIn(0f, 0.99f)\n                    val newColor = when {\n                        newNorm <= 0f -> Color.White\n                        newNorm >= 1f -> Color.White\n                        else -> Color.hsv(\n                            hue = newNorm * 360f,\n                            saturation = 1f,\n                            value = 1f,\n                        )\n                    }\n                    onColorChanged(newColor)\n                }\n            },\n    ) {\n        Canvas(Modifier.fillMaxWidth().height(trackHeight)) {\n            // == トラック描画 ==\n            drawRoundRect(\n                brush = trackBrush,\n                cornerRadius = CornerRadius(size.height / 2),\n            )\n\n            // == つまみ描画 (color が null なら非表示) ==\n            if (color != null) {\n                val center = Offset(animatedPos * size.width, size.height / 2)\n                // 外枠\n                drawCircle(\n                    color = Color.White,\n                    radius = knobRadiusPx,\n                    center = center,\n                )\n                // 内側：選択中の color をそのまま使う\n                drawCircle(\n                    color = color,\n                    radius = knobRadiusPx * 0.7f,\n                    center = center,\n                )\n            }\n        }\n    }\n}\n\nprivate fun Color.hue360(): Float {\n    val r = red\n    val g = green\n    val b = blue\n\n    val max = max(max(r, g), b)\n    val min = min(min(r, g), b)\n    val delta = max - min\n\n    if (delta == 0f) return 0f\n\n    val hue = when (max) {\n        r -> 60f * (((g - b) / delta) % 6f)\n        g -> 60f * (((b - r) / delta) + 2f)\n        else -> 60f * (((r - g) / delta) + 4f)\n    }\n    return if (hue < 0f) hue + 360f else hue\n}\n",
      "hash": "9c4baf9a8b030e03c5e165061a22bdbee95b68f66f55347ce6a1ada98e7f427b",
      "size": 5055
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/view/EmptyView.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.screen.view\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport me.matsumo.zencall.core.ui.theme.bold\nimport me.matsumo.zencall.core.ui.theme.center\nimport org.jetbrains.compose.resources.StringResource\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\nfun EmptyView(\n    titleRes: StringResource,\n    messageRes: StringResource,\n    modifier: Modifier = Modifier,\n) {\n    Column(\n        modifier = modifier\n            .background(MaterialTheme.colorScheme.surface)\n            .padding(24.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.spacedBy(\n            space = 8.dp,\n            alignment = Alignment.CenterVertically,\n        ),\n    ) {\n        Text(\n            modifier = Modifier.fillMaxWidth(),\n            text = stringResource(titleRes),\n            style = MaterialTheme.typography.titleMedium.bold().center(),\n            color = MaterialTheme.colorScheme.onSurface,\n        )\n\n        Text(\n            modifier = Modifier.fillMaxWidth(),\n            text = stringResource(messageRes),\n            style = MaterialTheme.typography.bodyMedium.center(),\n            color = MaterialTheme.colorScheme.onSurfaceVariant,\n        )\n    }\n}\n",
      "hash": "c7cdd68e2ea91a5affa51a49bb5234d93318ddb8c0b43b53ce7c38b68220e831",
      "size": 1709
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/view/ErrorView.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.screen.view\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.outlined.ArrowBackIos\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.common_reload\nimport me.matsumo.zencall.core.resource.error_executed\nimport me.matsumo.zencall.core.ui.screen.ScreenState\nimport me.matsumo.zencall.core.ui.theme.bold\nimport me.matsumo.zencall.core.ui.theme.center\nimport org.jetbrains.compose.resources.StringResource\nimport org.jetbrains.compose.resources.stringResource\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun ErrorView(\n    title: StringResource,\n    message: StringResource,\n    modifier: Modifier = Modifier,\n    retryTitle: StringResource? = null,\n    retryAction: (() -> Unit)? = null,\n    terminate: (() -> Unit)? = null,\n) {\n    Box(modifier) {\n        if (terminate != null) {\n            TopAppBar(\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .fillMaxWidth(),\n                title = { /* nothing */ },\n                navigationIcon = {\n                    IconButton(terminate) {\n                        Icon(\n                            imageVector = Icons.AutoMirrored.Outlined.ArrowBackIos,\n                            contentDescription = null,\n                        )\n                    }\n                },\n            )\n        }\n\n        Column(\n            modifier = Modifier.fillMaxSize()\n                .background(MaterialTheme.colorScheme.surface)\n                .padding(24.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.spacedBy(\n                space = 8.dp,\n                alignment = Alignment.CenterVertically,\n            ),\n        ) {\n            Text(\n                modifier = Modifier.fillMaxWidth(),\n                text = stringResource(title),\n                style = MaterialTheme.typography.titleMedium.bold().center(),\n                color = MaterialTheme.colorScheme.onSurface,\n            )\n\n            Text(\n                modifier = Modifier.fillMaxWidth(),\n                text = stringResource(message),\n                style = MaterialTheme.typography.bodyMedium.center(),\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\n            )\n\n            if (retryAction != null) {\n                Button(\n                    modifier = Modifier.padding(top = 24.dp),\n                    onClick = { retryAction.invoke() },\n                ) {\n                    Text(\n                        text = stringResource(retryTitle ?: Res.string.common_reload),\n                        style = MaterialTheme.typography.labelMedium,\n                        color = MaterialTheme.colorScheme.onPrimary,\n                    )\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ErrorView(\n    errorState: ScreenState.Error,\n    retryAction: (() -> Unit)?,\n    terminate: (() -> Unit)?,\n    modifier: Modifier = Modifier,\n) {\n    ErrorView(\n        modifier = modifier,\n        title = Res.string.error_executed,\n        message = errorState.message,\n        retryTitle = errorState.retryTitle,\n        retryAction = retryAction,\n        terminate = terminate,\n    )\n}\n",
      "hash": "0866543e49a7f7007614a9f106117580468d4304bfe1bb898c715512f50a1b7c",
      "size": 4109
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/view/LoadingView.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.screen.view\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\n\n@Composable\nfun LoadingView(\n    modifier: Modifier = Modifier,\n) {\n    Box(modifier) {\n        CircularProgressIndicator(\n            modifier = Modifier\n                .padding(24.dp)\n                .align(Alignment.Center),\n            color = MaterialTheme.colorScheme.primary,\n        )\n    }\n}\n",
      "hash": "9fdfb3c46f7a7585562770ad7fa286232b0a5856c3102754b7d3bf2c4a19cf7b",
      "size": 705
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/screen/view/SegmentedTabRow.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.screen.view\n\nimport androidx.compose.animation.animateColorAsState\nimport androidx.compose.animation.core.animateDpAsState\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.ExperimentalMaterial3ExpressiveApi\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.zIndex\nimport kotlinx.collections.immutable.ImmutableList\n\n@OptIn(ExperimentalMaterial3ExpressiveApi::class)\n@Composable\nfun <T> SegmentedTabRow(\n    items: ImmutableList<T>,\n    selectedIndex: Int,\n    onSelect: (Int) -> Unit,\n    modifier: Modifier = Modifier,\n    containerHeight: Dp = 56.dp,\n    containerShape: Shape = RoundedCornerShape(50),\n    indicatorShape: Shape = RoundedCornerShape(50),\n    indicatorColor: Color = MaterialTheme.colorScheme.primaryContainer,\n    selectedContentColor: Color = MaterialTheme.colorScheme.onPrimaryContainer,\n    unselectedContentColor: Color = MaterialTheme.colorScheme.primary,\n    itemContent: @Composable (item: T, isSelected: Boolean) -> Unit = { item, _ ->\n        Text(\n            text = item.toString(),\n            style = MaterialTheme.typography.labelLarge,\n        )\n    },\n) {\n    BoxWithConstraints(\n        modifier = modifier\n            .height(containerHeight)\n            .clip(containerShape)\n            .border(\n                width = 1.dp,\n                color = MaterialTheme.colorScheme.outline.copy(alpha = 0.4f),\n                shape = containerShape,\n            ),\n    ) {\n        val totalWidth = maxWidth\n        val tabWidth: Dp = totalWidth / items.size\n        val indicatorLeft = tabWidth * selectedIndex\n\n        val animatedLeft by animateDpAsState(\n            targetValue = indicatorLeft,\n            animationSpec = MaterialTheme.motionScheme.defaultSpatialSpec(),\n            label = \"indicatorLeft\",\n        )\n\n        Box(\n            Modifier\n                .offset(x = animatedLeft)\n                .width(tabWidth)\n                .fillMaxHeight()\n                .padding(4.dp)\n                .clip(indicatorShape)\n                .background(indicatorColor)\n                .zIndex(-1f),\n        )\n\n        Row(Modifier.fillMaxSize()) {\n            items.forEachIndexed { idx, item ->\n                val isSel = idx == selectedIndex\n                val textColor by animateColorAsState(\n                    if (isSel) selectedContentColor else unselectedContentColor,\n                    animationSpec = tween(200),\n                    label = \"textColor\",\n                )\n\n                Box(\n                    modifier = Modifier\n                        .weight(1f)\n                        .fillMaxHeight()\n                        .padding(4.dp)\n                        .clip(indicatorShape)\n                        .clickable { onSelect(idx) },\n                    contentAlignment = Alignment.Center,\n                ) {\n                    CompositionLocalProvider(LocalContentColor provides textColor) {\n                        itemContent(item, isSel)\n                    }\n                }\n            }\n        }\n    }\n}\n",
      "hash": "8533e1b347f3125925ae869044747647e128ab9c4a966b128d715c0d53c65da1",
      "size": 4228
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/theme/NavController.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.theme\n\nimport androidx.compose.runtime.staticCompositionLocalOf\nimport androidx.navigation.NavHostController\n\nval LocalNavController = staticCompositionLocalOf<NavHostController> {\n    error(\"No NavController provided\")\n}\n",
      "hash": "7e63453559396dbb73bb6e5d16d9442e25324ed1d76774641fb74daab26a8181",
      "size": 256
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/theme/NavTransitions.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.theme\n\nimport androidx.compose.animation.AnimatedContentTransitionScope\nimport androidx.compose.animation.EnterTransition\nimport androidx.compose.animation.ExitTransition\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.slideInHorizontally\nimport androidx.compose.animation.slideOutHorizontally\nimport androidx.compose.material3.ExperimentalMaterial3ExpressiveApi\nimport androidx.compose.material3.MotionScheme\nimport androidx.navigation.NavBackStackEntry\n\n@OptIn(ExperimentalMaterial3ExpressiveApi::class)\nobject NavTransitions {\n    private val motion = MotionScheme.standard()\n    private val expressiveMotion = MotionScheme.expressive()\n\n    object SlideFromRight {\n        fun enter(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition = {\n            fadeIn(\n                animationSpec = expressiveMotion.defaultEffectsSpec(),\n            ) + slideIntoContainer(\n                towards = AnimatedContentTransitionScope.SlideDirection.Start,\n                animationSpec = expressiveMotion.defaultSpatialSpec(),\n            )\n        }\n\n        fun exit(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition = {\n            fadeOut(\n                animationSpec = expressiveMotion.defaultEffectsSpec(),\n            ) + slideOutOfContainer(\n                towards = AnimatedContentTransitionScope.SlideDirection.Start,\n                animationSpec = expressiveMotion.defaultSpatialSpec(),\n            )\n        }\n\n        fun popEnter(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition = {\n            fadeIn(\n                animationSpec = expressiveMotion.defaultEffectsSpec(),\n            ) + slideIntoContainer(\n                towards = AnimatedContentTransitionScope.SlideDirection.End,\n                animationSpec = expressiveMotion.defaultSpatialSpec(),\n            )\n        }\n\n        fun popExit(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition = {\n            fadeOut(\n                animationSpec = expressiveMotion.defaultEffectsSpec(),\n            ) + slideOutOfContainer(\n                towards = AnimatedContentTransitionScope.SlideDirection.End,\n                animationSpec = expressiveMotion.defaultSpatialSpec(),\n            )\n        }\n    }\n\n    object SlideFadeFromRight {\n        fun enter(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition = {\n            fadeIn(\n                animationSpec = motion.defaultEffectsSpec(),\n            ) + slideInHorizontally(\n                initialOffsetX = { fullWidth -> (fullWidth * 0.1).toInt() },\n                animationSpec = motion.defaultSpatialSpec(),\n            )\n        }\n\n        fun exit(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition = {\n            fadeOut(\n                animationSpec = motion.defaultEffectsSpec(),\n            ) + slideOutHorizontally(\n                targetOffsetX = { fullWidth -> -(fullWidth * 0.1).toInt() },\n                animationSpec = motion.defaultSpatialSpec(),\n            )\n        }\n\n        fun popEnter(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition = {\n            fadeIn(\n                animationSpec = motion.defaultEffectsSpec(),\n            ) + slideInHorizontally(\n                initialOffsetX = { fullWidth -> -(fullWidth * 0.1).toInt() },\n                animationSpec = motion.defaultSpatialSpec(),\n            )\n        }\n\n        fun popExit(): AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition = {\n            fadeOut(\n                animationSpec = motion.defaultEffectsSpec(),\n            ) + slideOutHorizontally(\n                targetOffsetX = { fullWidth -> (fullWidth * 0.1).toInt() },\n                animationSpec = motion.defaultSpatialSpec(),\n            )\n        }\n    }\n}\n",
      "hash": "860f1cf9954a301972c2ac58cc77aab2c14c02c25e9679ce2982aa5228ff5803",
      "size": 3933
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/theme/Setting.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.theme\n\nimport androidx.compose.runtime.staticCompositionLocalOf\nimport me.matsumo.zencall.core.model.AppConfig\nimport me.matsumo.zencall.core.model.AppSetting\n\nval LocalAppSetting = staticCompositionLocalOf {\n    AppSetting.DEFAULT\n}\n\nval LocalAppConfig = staticCompositionLocalOf<AppConfig> {\n    error(\"No AppConfig provided\")\n}\n",
      "hash": "4e946d00daba0b8487dd1500846d963809a10559366f2ef18decf655c4800760",
      "size": 363
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/theme/Text.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.theme\n\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\n\nfun TextStyle.start() = this.merge(TextStyle(textAlign = TextAlign.Start))\nfun TextStyle.center() = this.merge(TextStyle(textAlign = TextAlign.Center))\nfun TextStyle.end() = this.merge(TextStyle(textAlign = TextAlign.End))\n\nfun TextStyle.bold() = this.merge(TextStyle(fontWeight = FontWeight.Bold))\nfun TextStyle.extraBold() = this.merge(TextStyle(fontWeight = FontWeight.ExtraBold))\nfun TextStyle.italic() = this.merge(TextStyle(fontStyle = FontStyle.Italic))\n",
      "hash": "38ae6bc58f1888d3384d42a6a3e3ecff45ebd4c06872e7540ea6146bc0dc064f",
      "size": 688
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/theme/Theme.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.theme\n\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material3.ExperimentalMaterial3ExpressiveApi\nimport androidx.compose.material3.MaterialExpressiveTheme\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.rememberNavController\nimport me.matsumo.zencall.core.model.AppConfig\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.model.Theme\nimport me.matsumo.zencall.core.ui.utils.rememberColorScheme\nimport org.koin.compose.koinInject\n\n@Suppress(\"ModifierMissing\")\n@OptIn(ExperimentalMaterial3ExpressiveApi::class)\n@Composable\nfun GrabeeTheme(\n    appSetting: AppSetting = AppSetting.DEFAULT,\n    navController: NavHostController = rememberNavController(),\n    appConfig: AppConfig = koinInject(),\n    content: @Composable () -> Unit,\n) {\n    val colorScheme = rememberColorScheme(\n        useDynamicColor = appSetting.useDynamicColor,\n        seedColor = appSetting.seedColor,\n        isDark = shouldUseDarkTheme(appSetting.theme),\n    )\n\n    CompositionLocalProvider(\n        LocalNavController provides navController,\n        LocalAppSetting provides appSetting,\n        LocalAppConfig provides appConfig,\n    ) {\n        MaterialExpressiveTheme(\n            colorScheme = colorScheme,\n        ) {\n            Surface(\n                color = MaterialTheme.colorScheme.surface,\n                content = content,\n            )\n        }\n    }\n}\n\n@Composable\nfun shouldUseDarkTheme(theme: Theme): Boolean {\n    return when (theme) {\n        Theme.System -> isSystemInDarkTheme()\n        Theme.Light -> false\n        Theme.Dark -> true\n    }\n}\n",
      "hash": "862f093f231f2d5bd93894e0ac1ebd8370721b4cc522ffc0370fed7723a283aa",
      "size": 1854
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/utils/ColorUtils.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.utils\n\nimport androidx.compose.material3.ColorScheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.Color\n\n@Composable\nexpect fun rememberColorScheme(\n    useDynamicColor: Boolean,\n    seedColor: Color,\n    isDark: Boolean,\n): ColorScheme\n\nexpect val isSupportDynamicColor: Boolean\n",
      "hash": "c66e9b6a74216b936457e1a9eb8fb86580c116ef31913505c40ff733666d3ef4",
      "size": 348
    },
    "/core/ui/src/commonMain/kotlin/me/matsumo/grabee/core/ui/utils/UnitUtils.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.utils\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.Dp\nimport kotlin.math.roundToInt\n\n@Composable\nfun pxToMm(px: Int): Float = with(LocalDensity.current) {\n    val dpi = density * 160f\n    px / dpi * 25.4f\n}\n\n@Composable\nfun mmToPx(mm: Float): Int = with(LocalDensity.current) {\n    val dpi = density * 160f\n    (mm / 25.4f * dpi).roundToInt()\n}\n\n@Composable\nfun Int.toDp(): Dp = with(LocalDensity.current) {\n    toDp()\n}\n\n@Composable\nfun Dp.toPx(): Float = with(LocalDensity.current) {\n    toPx()\n}\n",
      "hash": "124420414690fe764c6500915df3944c46975269015cfe479ab04f03a623732a",
      "size": 613
    },
    "/core/ui/src/iosMain/kotlin/me/matsumo/grabee/core/ui/utils/ColorUtils.ios.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.core.ui.utils\n\nimport androidx.compose.material3.ColorScheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.Color\nimport com.materialkolor.rememberDynamicColorScheme\n\n@Composable\nactual fun rememberColorScheme(\n    useDynamicColor: Boolean,\n    seedColor: Color,\n    isDark: Boolean,\n): ColorScheme = rememberDynamicColorScheme(\n    seedColor = seedColor,\n    isDark = isDark,\n)\n\nactual val isSupportDynamicColor: Boolean = false\n",
      "hash": "0636ba104c09f61165ebe765e56876e532b795308dc7fb41bad9bcc24e1b02eb",
      "size": 488
    },
    "/feature/home/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.compose\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.feature.home\"\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:model\"))\n            implementation(project(\":core:repository\"))\n            implementation(project(\":core:datasource\"))\n            implementation(project(\":core:ui\"))\n            implementation(project(\":core:resource\"))\n        }\n    }\n}\n",
      "hash": "aa7f6b4659da6c58f2dbe1a7463c796172295261a16d8204734dbc56495f7256",
      "size": 704
    },
    "/feature/home/src/commonMain/kotlin/me/matsumo/grabee/feature/home/HomeNavigation.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.home\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.compose.composable\nimport me.matsumo.zencall.core.model.Destination\n\nfun NavGraphBuilder.homeScreen() {\n    composable<Destination.Home> {\n        HomeScreen(\n            modifier = Modifier.fillMaxSize(),\n        )\n    }\n}\n",
      "hash": "6d19a5a7b6680c13013cc225e33c30a784db4343119171beb1824dea0a43d7a7",
      "size": 423
    },
    "/feature/home/src/commonMain/kotlin/me/matsumo/grabee/feature/home/HomeScreen.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.home\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport me.matsumo.zencall.core.model.Destination\nimport me.matsumo.zencall.core.ui.theme.LocalNavController\nimport org.koin.compose.viewmodel.koinViewModel\n\n@Composable\ninternal fun HomeScreen(\n    modifier: Modifier = Modifier,\n    viewModel: HomeViewModel = koinViewModel(),\n) {\n    val navController = LocalNavController.current\n\n    Box(\n        modifier = modifier,\n        contentAlignment = Alignment.Center,\n    ) {\n        Button(\n            onClick = { navController.navigate(Destination.Setting.Root) },\n        ) {\n            Text(\"Setting\")\n        }\n    }\n}\n",
      "hash": "6a9b9729f85992908e0f823f08115a3b9fb2eaad5e656b1ab5d30680abfa7256",
      "size": 854
    },
    "/feature/home/src/commonMain/kotlin/me/matsumo/grabee/feature/home/HomeViewModel.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.home\n\nimport androidx.lifecycle.ViewModel\n\ninternal class HomeViewModel : ViewModel()\n",
      "hash": "29e0b9d279372259507e4cbacf0440fa6b89e69e4c9c098d4a85c30e30f38a8a",
      "size": 120
    },
    "/feature/home/src/commonMain/kotlin/me/matsumo/grabee/feature/home/di/HomeModule.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.home.di\n\nimport me.matsumo.zencall.feature.home.HomeViewModel\nimport org.koin.core.module.dsl.viewModelOf\nimport org.koin.dsl.module\n\nval homeModule = module {\n    viewModelOf(::HomeViewModel)\n}\n",
      "hash": "44d685a53157eff97f5fb6588691fe59f8493c911d55d3225bd80d360541ea47",
      "size": 228
    },
    "/feature/setting/build.gradle.kts": {
      "type": "content",
      "content": "plugins {\n    id(\"matsumo.primitive.kmp.common\")\n    id(\"matsumo.primitive.android.library\")\n    id(\"matsumo.primitive.kmp.compose\")\n    id(\"matsumo.primitive.kmp.android\")\n    id(\"matsumo.primitive.kmp.ios\")\n    id(\"matsumo.primitive.detekt\")\n}\n\nandroid {\n    namespace = \"me.matsumo.zencall.feature.setting\"\n}\n\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":core:common\"))\n            implementation(project(\":core:model\"))\n            implementation(project(\":core:repository\"))\n            implementation(project(\":core:datasource\"))\n            implementation(project(\":core:ui\"))\n            implementation(project(\":core:resource\"))\n\n            implementation(libs.libraries.ui)\n        }\n    }\n}\n",
      "hash": "4fdd26faa628634ad5b43fb89054dcf700e34b1439a6a52c680d8acd642e2988",
      "size": 754
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/SettingNavigation.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.compose.composable\nimport me.matsumo.zencall.core.model.Destination\n\nfun NavGraphBuilder.settingScreen() {\n    composable<Destination.Setting.Root> {\n        SettingScreen(\n            modifier = Modifier.fillMaxSize(),\n        )\n    }\n}\n",
      "hash": "23dbed86288eb64f496e8c6237d25a6c7bf5b3bb61dd1547bf037db4fdfed180",
      "size": 440
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/SettingScreen.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalUriHandler\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport me.matsumo.zencall.core.model.Destination\nimport me.matsumo.zencall.core.ui.theme.LocalNavController\nimport me.matsumo.zencall.feature.setting.components.SettingTopAppBar\nimport me.matsumo.zencall.feature.setting.components.section.SettingInfoSection\nimport me.matsumo.zencall.feature.setting.components.section.SettingOthersSection\nimport me.matsumo.zencall.feature.setting.components.section.SettingThemeSection\nimport org.koin.compose.viewmodel.koinViewModel\n\n@Composable\ninternal fun SettingScreen(\n    modifier: Modifier = Modifier,\n    viewModel: SettingViewModel = koinViewModel(),\n) {\n    val navController = LocalNavController.current\n    val uriHandler = LocalUriHandler.current\n    val setting by viewModel.setting.collectAsStateWithLifecycle()\n\n    Scaffold(\n        modifier = modifier,\n        topBar = {\n            SettingTopAppBar(\n                onBackClicked = navController::popBackStack,\n                modifier = Modifier,\n            )\n        },\n    ) {\n        LazyColumn(\n            modifier = Modifier.fillMaxSize(),\n            contentPadding = it,\n        ) {\n            item {\n                SettingThemeSection(\n                    modifier = Modifier.fillMaxWidth(),\n                    setting = setting,\n                    onThemeChanged = viewModel::setTheme,\n                    onUseDynamicColorChanged = viewModel::setUseDynamicColor,\n                    onSeedColorChanged = viewModel::setSeedColor,\n                )\n            }\n\n            item {\n                SettingInfoSection(\n                    modifier = Modifier.fillMaxWidth(),\n                    setting = setting,\n                )\n            }\n\n            item {\n                SettingOthersSection(\n                    modifier = Modifier.fillMaxWidth(),\n                    setting = setting,\n                    onTeamsOfServiceClicked = {\n                        uriHandler.openUri(\"https://www.matsumo.me/application/all/team_of_service\")\n                    },\n                    onPrivacyPolicyClicked = {\n                        uriHandler.openUri(\"https://www.matsumo.me/application/all/privacy_policy\")\n                    },\n                    onOpenSourceLicenseClicked = {\n                        navController.navigate(Destination.Setting.License)\n                    },\n                    onDeveloperModeChanged = viewModel::setDeveloperMode,\n                )\n            }\n        }\n    }\n}\n",
      "hash": "9ccd3150a35165dc3fe72f56e7865da4cfddc534f7f72dbd1a287d3b8ab4f996",
      "size": 2910
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/SettingViewModel.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting\n\nimport androidx.compose.ui.graphics.Color\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.launch\nimport me.matsumo.zencall.core.model.Theme\nimport me.matsumo.zencall.core.repository.AppSettingRepository\n\nclass SettingViewModel(\n    private val repository: AppSettingRepository,\n) : ViewModel() {\n    val setting = repository.setting\n\n    fun setTheme(theme: Theme) {\n        viewModelScope.launch {\n            repository.setTheme(theme)\n        }\n    }\n\n    fun setUseDynamicColor(useDynamicColor: Boolean) {\n        viewModelScope.launch {\n            repository.setUseDynamicColor(useDynamicColor)\n        }\n    }\n\n    fun setSeedColor(color: Color) {\n        viewModelScope.launch {\n            repository.setSeedColor(color)\n        }\n    }\n\n    fun setDeveloperMode(developerMode: Boolean) {\n        viewModelScope.launch {\n            repository.setDeveloperMode(developerMode)\n        }\n    }\n}\n",
      "hash": "0e8a40ac435fb690efb2c561505e2e8464c079a03a39c63aa7b150ad56c9b701",
      "size": 999
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/SettingDeveloperModeDialog.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.unit.dp\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.setting_other_developer_mode_dialog_description\nimport me.matsumo.zencall.core.resource.setting_other_developer_mode_dialog_title\nimport me.matsumo.zencall.core.ui.theme.LocalAppConfig\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\ninternal fun SettingDeveloperModeDialog(\n    onDeveloperModeEnabled: () -> Unit,\n    onDismissRequest: () -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    val appConfig = LocalAppConfig.current\n\n    var pin by remember { mutableStateOf(\"\") }\n    var error by remember { mutableStateOf(false) }\n\n    LaunchedEffect(pin) {\n        error = false\n    }\n\n    AlertDialog(\n        modifier = modifier,\n        onDismissRequest = onDismissRequest,\n        title = {\n            Text(text = stringResource(Res.string.setting_other_developer_mode_dialog_title))\n        },\n        text = {\n            Column(\n                modifier = Modifier.fillMaxWidth(),\n                verticalArrangement = Arrangement.spacedBy(8.dp),\n            ) {\n                Text(\n                    text = stringResource(Res.string.setting_other_developer_mode_dialog_description),\n                )\n\n                OutlinedTextField(\n                    modifier = Modifier.fillMaxWidth(),\n                    value = pin,\n                    onValueChange = { pin = it },\n                    label = {\n                        Text(\"PIN\")\n                    },\n                    supportingText = {\n                        if (error) {\n                            Text(\"Invalid PIN\")\n                        }\n                    },\n                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.NumberPassword),\n                    singleLine = true,\n                    isError = error,\n                )\n            }\n        },\n        confirmButton = {\n            TextButton(\n                onClick = {\n                    if (pin == appConfig.developerPin) {\n                        onDeveloperModeEnabled.invoke()\n                    } else {\n                        error = true\n                    }\n                },\n            ) {\n                Text(\"Submit\")\n            }\n        },\n        dismissButton = {\n            TextButton(onDismissRequest) {\n                Text(\"Cancel\")\n            }\n        },\n    )\n}\n",
      "hash": "05c64d3f04a4928e14f7ad8299b570305b7b5bdb8bebbbfdf468bc818c5d49e8",
      "size": 3203
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/SettingSwitchItem.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.compositeOver\nimport androidx.compose.ui.unit.dp\nimport org.jetbrains.compose.resources.StringResource\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\nfun SettingSwitchItem(\n    title: StringResource,\n    description: StringResource?,\n    value: Boolean,\n    onValueChanged: (Boolean) -> Unit,\n    modifier: Modifier = Modifier,\n    isEnabled: Boolean = true,\n) {\n    val titleColor: Color\n    val descriptionColor: Color\n\n    if (isEnabled) {\n        titleColor = MaterialTheme.colorScheme.onSurface\n        descriptionColor = MaterialTheme.colorScheme.onSurfaceVariant\n    } else {\n        MaterialTheme.colorScheme.onSurface\n            .copy(alpha = 0.38f)\n            .compositeOver(MaterialTheme.colorScheme.surface)\n            .also {\n                titleColor = it\n                descriptionColor = it\n            }\n    }\n\n    Row(\n        modifier = modifier\n            .clickable(\n                enabled = isEnabled,\n                onClick = { onValueChanged.invoke(!value) },\n            )\n            .padding(horizontal = 24.dp, vertical = 12.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.spacedBy(16.dp),\n    ) {\n        Column(\n            modifier = Modifier.weight(1f),\n            verticalArrangement = Arrangement.spacedBy(\n                space = 4.dp,\n                alignment = Alignment.CenterVertically,\n            ),\n        ) {\n            Text(\n                modifier = Modifier.fillMaxWidth(),\n                text = stringResource(title),\n                style = MaterialTheme.typography.bodyLarge,\n                color = titleColor,\n            )\n\n            if (description != null) {\n                Text(\n                    modifier = Modifier.fillMaxWidth(),\n                    text = stringResource(description),\n                    style = MaterialTheme.typography.bodyMedium,\n                    color = descriptionColor,\n                )\n            }\n        }\n\n        Switch(\n            enabled = isEnabled,\n            checked = value,\n            onCheckedChange = { onValueChanged.invoke(it) },\n        )\n    }\n}\n",
      "hash": "7228a2dc0b4cbccc2fe17998c2a786329add34a0f0e977cb8de8913a367a13e1",
      "size": 2826
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/SettingTextItem.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components\n\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.combinedClickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.compositeOver\nimport androidx.compose.ui.unit.dp\nimport org.jetbrains.compose.resources.StringResource\nimport org.jetbrains.compose.resources.stringResource\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun SettingTextItem(\n    title: String,\n    modifier: Modifier = Modifier,\n    description: String? = null,\n    onClick: (() -> Unit)? = null,\n    onLongClick: (() -> Unit)? = null,\n    isEnabled: Boolean = true,\n) {\n    val titleColor: Color\n    val descriptionColor: Color\n\n    if (isEnabled) {\n        titleColor = MaterialTheme.colorScheme.onSurface\n        descriptionColor = MaterialTheme.colorScheme.onSurfaceVariant\n    } else {\n        MaterialTheme.colorScheme.onSurface\n            .copy(alpha = 0.38f)\n            .compositeOver(MaterialTheme.colorScheme.surface)\n            .also {\n                titleColor = it\n                descriptionColor = it\n            }\n    }\n\n    Column(\n        modifier = modifier\n            .then(\n                if (onClick != null) {\n                    Modifier.combinedClickable(\n                        enabled = isEnabled,\n                        onClick = { onClick.invoke() },\n                        onLongClick = { onLongClick?.invoke() },\n                    )\n                } else {\n                    Modifier\n                },\n            )\n            .padding(horizontal = 24.dp, vertical = 12.dp),\n        verticalArrangement = Arrangement.spacedBy(\n            space = 4.dp,\n            alignment = Alignment.CenterVertically,\n        ),\n    ) {\n        Text(\n            modifier = Modifier.fillMaxWidth(),\n            text = title,\n            style = MaterialTheme.typography.bodyLarge,\n            color = titleColor,\n        )\n\n        if (description != null) {\n            Text(\n                modifier = Modifier.fillMaxWidth(),\n                text = description,\n                style = MaterialTheme.typography.bodyMedium,\n                color = descriptionColor,\n            )\n        }\n    }\n}\n\n@Composable\nfun SettingTextItem(\n    title: StringResource,\n    modifier: Modifier = Modifier,\n    description: StringResource? = null,\n    onClick: (() -> Unit)? = null,\n    isEnabled: Boolean = true,\n) {\n    SettingTextItem(\n        modifier = modifier,\n        title = stringResource(title),\n        description = description?.let { stringResource(it) },\n        onClick = onClick,\n        isEnabled = isEnabled,\n    )\n}\n",
      "hash": "61417c9979c1ad36a505a9264edd1887da80bd5cb3beb80979c57674e945557e",
      "size": 3073
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/SettingTitleItem.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components\n\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport me.matsumo.zencall.core.ui.theme.bold\nimport org.jetbrains.compose.resources.StringResource\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\ninternal fun SettingTitleItem(\n    text: StringResource,\n    modifier: Modifier = Modifier,\n) {\n    Text(\n        modifier = modifier.padding(\n            top = 24.dp,\n            bottom = 12.dp,\n            start = 24.dp,\n            end = 24.dp,\n        ),\n        text = stringResource(text).uppercase(),\n        style = MaterialTheme.typography.bodyMedium.bold(),\n        color = MaterialTheme.colorScheme.primary,\n    )\n}\n",
      "hash": "5f0b1b750137f445417029e84c2a4e56805bfdb82742cbbcbe24dba1d21de63f",
      "size": 897
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/SettingTopAppBar.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components\n\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material3.CenterAlignedTopAppBar\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.ExperimentalMaterial3ExpressiveApi\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.setting_title\nimport org.jetbrains.compose.resources.stringResource\n\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterial3ExpressiveApi::class)\n@Composable\ninternal fun SettingTopAppBar(\n    onBackClicked: () -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    CenterAlignedTopAppBar(\n        modifier = modifier,\n        title = {\n            Text(stringResource(Res.string.setting_title))\n        },\n        navigationIcon = {\n            IconButton(onBackClicked) {\n                Icon(\n                    imageVector = Icons.AutoMirrored.Default.ArrowBack,\n                    contentDescription = null,\n                )\n            }\n        },\n    )\n}\n",
      "hash": "80505d17b9c2121a877862d4da49f99847bda422e78793e4167e6419d7724d14",
      "size": 1306
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/section/SettingInfoSection.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components.section\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.setting_information\nimport me.matsumo.zencall.core.resource.setting_information_app_id\nimport me.matsumo.zencall.core.resource.setting_information_app_version\nimport me.matsumo.zencall.core.ui.theme.LocalAppConfig\nimport me.matsumo.zencall.feature.setting.components.SettingTextItem\nimport me.matsumo.zencall.feature.setting.components.SettingTitleItem\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\ninternal fun SettingInfoSection(\n    setting: AppSetting,\n    modifier: Modifier = Modifier,\n) {\n    val appConfig = LocalAppConfig.current\n\n    Column(modifier) {\n        SettingTitleItem(\n            modifier = Modifier.fillMaxWidth(),\n            text = Res.string.setting_information,\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = stringResource(Res.string.setting_information_app_id),\n            description = setting.id,\n            onClick = null,\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = stringResource(Res.string.setting_information_app_version),\n            description = \"${appConfig.versionName}:${appConfig.versionCode} \" + when {\n                setting.plusMode && setting.developerMode -> \"[P+D]\"\n                setting.plusMode -> \"[Plus]\"\n                setting.developerMode -> \"[Dev]\"\n                else -> \"\"\n            },\n            onClick = { },\n        )\n    }\n}\n",
      "hash": "fea883f8e0b86fb8497df1634169c81fa5f63819b7fe7383ba7c12ed32c044a2",
      "size": 1805
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/section/SettingOthersSection.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components.section\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.setting_other\nimport me.matsumo.zencall.core.resource.setting_other_developer_mode\nimport me.matsumo.zencall.core.resource.setting_other_developer_mode_description\nimport me.matsumo.zencall.core.resource.setting_other_open_source_license\nimport me.matsumo.zencall.core.resource.setting_other_open_source_license_description\nimport me.matsumo.zencall.core.resource.setting_other_privacy_policy\nimport me.matsumo.zencall.core.resource.setting_other_team_of_service\nimport me.matsumo.zencall.feature.setting.components.SettingDeveloperModeDialog\nimport me.matsumo.zencall.feature.setting.components.SettingSwitchItem\nimport me.matsumo.zencall.feature.setting.components.SettingTextItem\nimport me.matsumo.zencall.feature.setting.components.SettingTitleItem\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\ninternal fun SettingOthersSection(\n    setting: AppSetting,\n    onTeamsOfServiceClicked: () -> Unit,\n    onPrivacyPolicyClicked: () -> Unit,\n    onOpenSourceLicenseClicked: () -> Unit,\n    onDeveloperModeChanged: (Boolean) -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    var isShowDeveloperModeDialog by remember { mutableStateOf(false) }\n\n    Column(modifier) {\n        SettingTitleItem(\n            modifier = Modifier.fillMaxWidth(),\n            text = Res.string.setting_other,\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = stringResource(Res.string.setting_other_team_of_service),\n            onClick = onTeamsOfServiceClicked,\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = stringResource(Res.string.setting_other_privacy_policy),\n            onClick = onPrivacyPolicyClicked,\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = Res.string.setting_other_open_source_license,\n            description = Res.string.setting_other_open_source_license_description,\n            onClick = { onOpenSourceLicenseClicked.invoke() },\n        )\n\n        SettingSwitchItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = Res.string.setting_other_developer_mode,\n            description = Res.string.setting_other_developer_mode_description,\n            value = setting.developerMode,\n            onValueChanged = {\n                if (it) {\n                    isShowDeveloperModeDialog = true\n                } else {\n                    onDeveloperModeChanged.invoke(false)\n                }\n            },\n        )\n    }\n\n    if (isShowDeveloperModeDialog) {\n        SettingDeveloperModeDialog(\n            onDeveloperModeEnabled = {\n                onDeveloperModeChanged.invoke(true)\n                isShowDeveloperModeDialog = false\n            },\n            onDismissRequest = {\n                isShowDeveloperModeDialog = false\n            },\n        )\n    }\n}\n",
      "hash": "0cf5433ac2b981dadeb06b240d53e3e7bfd0d7df0cbef3865f77e831697ca1e7",
      "size": 3409
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/components/section/SettingThemeSection.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.components.section\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport kotlinx.collections.immutable.toImmutableList\nimport kotlinx.coroutines.delay\nimport me.matsumo.zencall.core.model.AppSetting\nimport me.matsumo.zencall.core.model.Theme\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.setting_dynamic_color\nimport me.matsumo.zencall.core.resource.setting_dynamic_color_description\nimport me.matsumo.zencall.core.resource.setting_dynamic_color_system\nimport me.matsumo.zencall.core.resource.setting_dynamic_color_user\nimport me.matsumo.zencall.core.resource.setting_theme\nimport me.matsumo.zencall.core.resource.setting_theme_app\nimport me.matsumo.zencall.core.resource.setting_theme_app_auto\nimport me.matsumo.zencall.core.resource.setting_theme_app_dark\nimport me.matsumo.zencall.core.resource.setting_theme_app_description\nimport me.matsumo.zencall.core.resource.setting_theme_app_light\nimport me.matsumo.zencall.core.ui.screen.view.ColorSlider\nimport me.matsumo.zencall.core.ui.screen.view.SegmentedTabRow\nimport me.matsumo.zencall.core.ui.utils.isSupportDynamicColor\nimport me.matsumo.zencall.feature.setting.components.SettingTextItem\nimport me.matsumo.zencall.feature.setting.components.SettingTitleItem\nimport org.jetbrains.compose.resources.stringResource\n\n@Composable\ninternal fun SettingThemeSection(\n    setting: AppSetting,\n    onThemeChanged: (Theme) -> Unit,\n    onUseDynamicColorChanged: (Boolean) -> Unit,\n    onSeedColorChanged: (Color) -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    val themes = Theme.entries\n    var currentThemeIndex by remember(setting) { mutableStateOf(themes.indexOf(setting.theme)) }\n\n    var currentDynamicColorProviderIndex by remember {\n        mutableStateOf(if (setting.useDynamicColor && isSupportDynamicColor) 0 else 1)\n    }\n    val dynamicColorProviders = listOf(\n        stringResource(Res.string.setting_dynamic_color_system),\n        stringResource(Res.string.setting_dynamic_color_user),\n    )\n\n    LaunchedEffect(currentDynamicColorProviderIndex) {\n        if (!isSupportDynamicColor) {\n            delay(100)\n            currentDynamicColorProviderIndex = 1\n        }\n    }\n\n    Column(modifier) {\n        SettingTitleItem(\n            modifier = Modifier.fillMaxWidth(),\n            text = Res.string.setting_theme,\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = Res.string.setting_theme_app,\n            description = Res.string.setting_theme_app_description,\n            onClick = null,\n        )\n\n        SegmentedTabRow(\n            modifier = Modifier\n                .padding(16.dp, 8.dp)\n                .fillMaxWidth(),\n            items = themes.toImmutableList(),\n            selectedIndex = currentThemeIndex,\n            onSelect = { onThemeChanged.invoke(themes[it]) },\n            itemContent = @Composable { item, _ ->\n                Text(\n                    text = when (item) {\n                        Theme.System -> stringResource(Res.string.setting_theme_app_auto)\n                        Theme.Light -> stringResource(Res.string.setting_theme_app_light)\n                        Theme.Dark -> stringResource(Res.string.setting_theme_app_dark)\n                    },\n                    style = MaterialTheme.typography.labelLarge,\n                )\n            },\n        )\n\n        SettingTextItem(\n            modifier = Modifier.fillMaxWidth(),\n            title = Res.string.setting_dynamic_color,\n            description = Res.string.setting_dynamic_color_description,\n            onClick = null,\n        )\n\n        SegmentedTabRow(\n            modifier = Modifier\n                .padding(16.dp, 8.dp)\n                .fillMaxWidth(),\n            items = dynamicColorProviders.toImmutableList(),\n            selectedIndex = currentDynamicColorProviderIndex,\n            onSelect = {\n                currentDynamicColorProviderIndex = it\n                onUseDynamicColorChanged.invoke(it == 0)\n            },\n        )\n\n        AnimatedVisibility(\n            modifier = Modifier.fillMaxWidth(),\n            visible = currentDynamicColorProviderIndex == 1,\n        ) {\n            ColorSlider(\n                modifier = Modifier\n                    .padding(top = 8.dp)\n                    .padding(16.dp, 8.dp)\n                    .fillMaxWidth(),\n                color = setting.seedColor,\n                onColorChanged = onSeedColorChanged,\n            )\n        }\n    }\n}\n",
      "hash": "1196cf31aab30eb36b3d9a3678fca55ab55c6fd8e4d74107e0351c8b835d0aed",
      "size": 5111
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/di/SettingModule.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.di\n\nimport me.matsumo.zencall.feature.setting.SettingViewModel\nimport org.koin.core.module.dsl.viewModelOf\nimport org.koin.dsl.module\n\nval settingModule = module {\n    viewModelOf(::SettingViewModel)\n}\n",
      "hash": "ad44562724078dcd497d6342eb3430ab4c60a1477f9a7e69f6a594267fdd3b1e",
      "size": 243
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/oss/SettingLicenseNavigation.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.oss\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.compose.composable\nimport me.matsumo.zencall.core.model.Destination\n\nfun NavGraphBuilder.settingLicenseScreen() {\n    composable<Destination.Setting.License> {\n        SettingLicenseRoute(\n            modifier = Modifier.fillMaxSize(),\n        )\n    }\n}\n",
      "hash": "ea43787d11049a6965c040b92aa6e4518d62982878fc2e3e3e8af1f4293f794d",
      "size": 460
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/oss/SettingLicenseScreen.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.oss\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.togetherWith\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material3.CenterAlignedTopAppBar\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.material3.rememberTopAppBarState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.input.nestedscroll.nestedScroll\nimport androidx.compose.ui.unit.dp\nimport com.mikepenz.aboutlibraries.Libs\nimport com.mikepenz.aboutlibraries.entity.Library\nimport com.mikepenz.aboutlibraries.ui.compose.rememberLibraries\nimport me.matsumo.zencall.core.resource.Res\nimport me.matsumo.zencall.core.resource.setting_other_open_source_license\nimport me.matsumo.zencall.core.ui.screen.view.LoadingView\nimport me.matsumo.zencall.core.ui.theme.LocalNavController\nimport me.matsumo.zencall.feature.setting.oss.components.LibraryItem\nimport me.matsumo.zencall.feature.setting.oss.components.LicenseDialog\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\nimport org.jetbrains.compose.resources.stringResource\n\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalResourceApi::class)\n@Composable\ninternal fun SettingLicenseRoute(\n    modifier: Modifier = Modifier,\n) {\n    val libs by rememberLibraries { Res.readBytes(\"files/aboutlibraries.json\").decodeToString() }\n\n    AnimatedContent(\n        modifier = modifier,\n        targetState = libs,\n        transitionSpec = { fadeIn().togetherWith(fadeOut()) },\n    ) {\n        if (it != null) {\n            SettingLicenseScreen(\n                modifier = Modifier.fillMaxSize(),\n                libs = it,\n            )\n        } else {\n            LoadingView(\n                modifier = Modifier.fillMaxSize(),\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nprivate fun SettingLicenseScreen(\n    libs: Libs,\n    modifier: Modifier = Modifier,\n) {\n    val navController = LocalNavController.current\n    val state = rememberTopAppBarState()\n    val behavior = TopAppBarDefaults.exitUntilCollapsedScrollBehavior(state)\n\n    var selectedLibrary by remember { mutableStateOf<Library?>(null) }\n\n    Scaffold(\n        modifier = modifier.nestedScroll(behavior.nestedScrollConnection),\n        topBar = {\n            CenterAlignedTopAppBar(\n                modifier = Modifier.fillMaxWidth(),\n                title = {\n                    Text(stringResource(Res.string.setting_other_open_source_license))\n                },\n                navigationIcon = {\n                    IconButton(navController::popBackStack) {\n                        Icon(\n                            imageVector = Icons.AutoMirrored.Default.ArrowBack,\n                            contentDescription = null,\n                        )\n                    }\n                },\n                scrollBehavior = behavior,\n            )\n        },\n    ) { padding ->\n        // ./gradlew exportLibraryDefinitions -PexportPath=\"../core/resource/src/commonMain/composeResources/files\" (for Windows)\n        // ./gradlew exportLibraryDefinitions -PaboutLibraries.exportPath=../core/resource/src/commonMain/composeResources/files (for Mac)\n\n        LazyColumn(\n            modifier = Modifier.fillMaxSize(),\n            contentPadding = PaddingValues(\n                top = 16.dp + padding.calculateTopPadding(),\n                bottom = 16.dp + padding.calculateBottomPadding(),\n                start = 16.dp,\n                end = 16.dp,\n            ),\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n        ) {\n            items(libs.libraries) { library ->\n                LibraryItem(\n                    modifier = Modifier.fillMaxWidth(),\n                    library = library,\n                    onClick = { selectedLibrary = it },\n                )\n            }\n        }\n    }\n\n    selectedLibrary?.let { library ->\n        LicenseDialog(\n            library = library,\n            onDismissRequest = { selectedLibrary = null },\n        )\n    }\n}\n",
      "hash": "580c6174848ce54918e5ca229715288a874b34030adc6ef25720865c3a09b93b",
      "size": 4946
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/oss/components/LibraryItem.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.oss.components\n\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.unit.dp\nimport com.mikepenz.aboutlibraries.entity.Library\nimport com.mikepenz.aboutlibraries.ui.compose.util.author\nimport me.matsumo.zencall.core.ui.theme.end\n\n@Composable\ninternal fun LibraryItem(\n    library: Library,\n    onClick: (Library) -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    Column(\n        modifier = modifier\n            .clip(RoundedCornerShape(8.dp))\n            .border(\n                width = 1.dp,\n                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.5f),\n                shape = RoundedCornerShape(8.dp),\n            )\n            .clickable { onClick.invoke(library) }\n            .padding(16.dp),\n        verticalArrangement = Arrangement.spacedBy(8.dp),\n    ) {\n        Text(\n            modifier = Modifier.fillMaxWidth(),\n            text = library.name,\n            style = MaterialTheme.typography.titleLarge,\n            color = MaterialTheme.colorScheme.onSurface,\n        )\n\n        if (library.author.isNotBlank()) {\n            Text(\n                modifier = Modifier.fillMaxWidth(),\n                text = library.author,\n                style = MaterialTheme.typography.bodyMedium,\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\n            )\n        }\n\n        if (library.description?.isNotBlank() == true) {\n            HorizontalDivider(\n                modifier = Modifier.padding(top = 8.dp),\n                thickness = 0.5.dp,\n                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.5f),\n            )\n\n            Text(\n                modifier = Modifier\n                    .padding(top = 8.dp)\n                    .fillMaxWidth(),\n                text = library.description!!,\n                style = MaterialTheme.typography.bodyMedium,\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\n            )\n        }\n\n        HorizontalDivider(\n            modifier = Modifier.padding(top = 8.dp),\n            thickness = 0.5.dp,\n            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.5f),\n        )\n\n        Row(\n            modifier = Modifier\n                .padding(top = 8.dp)\n                .fillMaxWidth(),\n            verticalAlignment = Alignment.Bottom,\n            horizontalArrangement = Arrangement.spacedBy(16.dp),\n        ) {\n            library.licenses.firstOrNull()?.let {\n                Text(\n                    modifier = Modifier.weight(1f),\n                    text = it.name,\n                    style = MaterialTheme.typography.bodyMedium,\n                    color = MaterialTheme.colorScheme.onSurface,\n                )\n            }\n\n            library.artifactVersion?.let {\n                Text(\n                    modifier = Modifier.weight(1f),\n                    text = it,\n                    style = MaterialTheme.typography.bodyMedium.end(),\n                    color = MaterialTheme.colorScheme.onSurface,\n                )\n            }\n        }\n    }\n}\n",
      "hash": "d18ec3b1802813f537f51432fc820195a1e616b3b5d3a7ea9b5c3f8c80eb6fcb",
      "size": 3747
    },
    "/feature/setting/src/commonMain/kotlin/me/matsumo/grabee/feature/setting/oss/components/LicenseDialog.kt": {
      "type": "content",
      "content": "package me.matsumo.zencall.feature.setting.oss.components\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material3.BasicAlertDialog\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.unit.dp\nimport com.mikepenz.aboutlibraries.entity.Library\nimport com.mikepenz.aboutlibraries.ui.compose.util.htmlReadyLicenseContent\nimport me.matsumo.zencall.core.ui.theme.center\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\ninternal fun LicenseDialog(\n    library: Library,\n    onDismissRequest: () -> Unit,\n) {\n    BasicAlertDialog(onDismissRequest) {\n        Column(\n            modifier = Modifier\n                .fillMaxHeight(0.78f)\n                .clip(RoundedCornerShape(16.dp))\n                .background(MaterialTheme.colorScheme.background)\n                .padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n        ) {\n            Text(\n                modifier = Modifier\n                    .padding(top = 8.dp)\n                    .padding(horizontal = 16.dp),\n                text = library.name,\n                style = MaterialTheme.typography.titleLarge.center(),\n                color = MaterialTheme.colorScheme.onBackground,\n            )\n\n            Text(\n                modifier = Modifier\n                    .padding(top = 8.dp)\n                    .weight(1f)\n                    .verticalScroll(rememberScrollState()),\n                text = library.licenses.firstOrNull()?.htmlReadyLicenseContent.orEmpty(),\n                style = MaterialTheme.typography.bodyMedium,\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\n            )\n\n            TextButton(\n                modifier = Modifier.align(Alignment.End),\n                onClick = onDismissRequest,\n            ) {\n                Text(\"OK\")\n            }\n        }\n    }\n}\n",
      "hash": "b4351df5617b0d585a5321440c16f41926ea2dd4ad2428245d0a1fecc9815946",
      "size": 2523
    },
    "/gradle.properties": {
      "type": "content",
      "content": "org.gradle.jvmargs=-Xmx6g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC -XX:MaxMetaspaceSize=1g\norg.gradle.parallel=true\norg.gradle.configureondemand=false\norg.gradle.caching=true\norg.gradle.configuration-cache=true\nandroid.useAndroidX=true\nkotlin.code.style=official\nandroid.nonTransitiveRClass=false\nandroid.defaults.buildfeatures.buildconfig=true\nandroid.defaults.buildfeatures.aidl=false\nandroid.defaults.buildfeatures.renderscript=false\nandroid.defaults.buildfeatures.resvalues=true\nandroid.defaults.buildfeatures.shaders=false\n",
      "hash": "5cece06c848dc0130354948a2fa1a6f4434508010fc347dabbf277734f6dbed2",
      "size": 560
    },
    "/gradle/keystore/debug.keystore": {
      "type": "binary",
      "hash": "910e46bb85ef8f5aa5a83d951c4d5827fb5247e2b8aeddb419ec353e9167e3d0",
      "size": 2603,
      "url": "https://raw.githubusercontent.com/matsumo0922/Grabee/b3ce0451a0717d33048fded1505c1171000a0578/gradle/keystore/debug.keystore"
    },
    "/gradle/libs.versions.toml": {
      "type": "content",
      "content": "[versions]\n# Application\nversionName = \"0.0.1\"\nversionCode = \"1\"\n\n# SDK\nminSdk = \"26\"\ntargetSdk = \"36\"\ncompileSdk = \"36\"\n\n# Gradle\ngradle = \"8.12.3\"\n\n# Kotlin\nkotlin = \"2.2.10\"\n\n# KotlinX\nkotlinxCoroutines = \"1.10.2\"\nkotlinxDatetime = \"0.7.1\"\nkotlinxSerializationJson = \"1.8.1\"\nkotlinxImmutable = \"0.4.0\"\n\n# KMP\nkmpCompose = \"1.9.0-beta03\"\nkmpComplete = \"1.1.0\"\nkmpLifecycle = \"2.9.2\"\nkmpNavigation = \"2.9.0-beta05\"\nkmpPurchase = \"2.1.0+16.2.0\"\nkmpPurchaseCommon = \"14.0.2\"\nadaptive = \"1.1.2\"\n\n# AndroidX\nandroidxCore = \"1.17.0\"\nandroidxCoreSplash = \"1.0.1\"\nandroidxAppCompat = \"1.7.1\"\nandroidxActivity = \"1.11.0\"\nandroidxFragment = \"1.8.9\"\nandroidxDataStore = \"1.1.7\"\nandroidxAnnotation = \"1.9.1\"\ncompose = \"2025.09.00\"\n\n# Google\nplayReview = \"2.0.2\"\nplayUpdate = \"2.1.0\"\nplayServiceAds = \"24.5.0\"\nksp = \"2.2.10-2.0.2\"\ngms = \"4.4.3\"\n\n# Firebase\nfirebase = \"34.1.0\"\nfirebaseCrashlytics = \"3.0.6\"\n\n# koin\nkoin = \"4.1.0\"\n\n# UI\ncalf = \"0.8.0\"\nzoomable = \"2.8.1\"\nkolor = \"3.0.1\"\ncolorPicker = \"1.1.2\"\n\n# Others\nktor = \"3.2.1\"\ncoil3 = \"3.2.0\"\nfilekit = \"0.10.0-beta04\"\ndetekt = \"1.23.8\"\nlibraries = \"12.2.4\"\nbuildKonfig = \"0.17.1\"\ntwitterComposeRule = \"0.0.26\"\n\n# Debugs\nnapier = \"2.7.1\"\n\n[plugins]\nandroid-application = { id = \"com.android.application\", version.ref = \"gradle\" }\nandroid-library = { id = \"com.android.library\", version.ref = \"gradle\" }\nkotlin-compose-compiler = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\nkotlin-serialization = { id = \"org.jetbrains.kotlin.plugin.serialization\", version.ref = \"kotlin\" }\nksp = { id = \"com.google.devtools.ksp\", version.ref = \"ksp\" }\ngms = { id = \"com.google.gms.google-services\", version.ref = \"gms\" }\ndetekt = { id = \"io.gitlab.arturbosch.detekt\", version.ref = \"detekt\" }\nfirebase-crashlytics = { id = \"com.google.firebase.crashlytics\", version.ref = \"firebaseCrashlytics\" }\nlibraries = { id = \"com.mikepenz.aboutlibraries.plugin\", version.ref = \"libraries\" }\nkmp = { id = \"org.jetbrains.kotlin.multiplatform\", version.ref = \"kotlin\" }\nkmpCompose = { id = \"org.jetbrains.compose\", version.ref = \"kmpCompose\" }\nkmpComplete = { id = \"com.louiscad.complete-kotlin\", version.ref = \"kmpComplete\" }\n\n[libraries]\n## Dependency of the include build-logic\nandroid-gradlePlugin = { group = \"com.android.tools.build\", name = \"gradle\", version.ref = \"gradle\" }\nkotlin-gradlePlugin = { group = \"org.jetbrains.kotlin\", name = \"kotlin-gradle-plugin\", version.ref = \"kotlin\" }\ngms-services = { group = \"com.google.gms\", name = \"google-services\", version.ref = \"gms\" }\nbuild-konfig-gradlePlugin = { group = \"com.codingfeline.buildkonfig\", name = \"buildkonfig-gradle-plugin\", version.ref = \"buildKonfig\" }\nsecret-gradlePlugin = { group = \"com.google.android.libraries.mapsplatform.secrets-gradle-plugin\", name = \"secrets-gradle-plugin\", version = \"2.0.1\" }\ndetekt-gradlePlugin = { group = \"io.gitlab.arturbosch.detekt\", name = \"detekt-gradle-plugin\", version.ref = \"detekt\" }\ndetekt-formatting = { group = \"io.gitlab.arturbosch.detekt\", name = \"detekt-formatting\", version.ref = \"detekt\" }\n\n# Kotlin\nkotlin-bom = { module = \"org.jetbrains.kotlin:kotlin-bom\", version.ref = \"kotlin\" }\nkotlin-stdlib = { module = \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\" }\nkotlin-reflect = { module = \"org.jetbrains.kotlin:kotlin-reflect\" }\n\n# KotlinX\nkotlinx-datetime = { group = \"org.jetbrains.kotlinx\", name = \"kotlinx-datetime\", version.ref = \"kotlinxDatetime\" }\nkotlinx-serialization-json = { group = \"org.jetbrains.kotlinx\", name = \"kotlinx-serialization-json\", version.ref = \"kotlinxSerializationJson\" }\nkotlinx-collections-immutable = { group = \"org.jetbrains.kotlinx\", name = \"kotlinx-collections-immutable\", version.ref = \"kotlinxImmutable\" }\n\n# AndroidX\nandroidx-core = { module = \"androidx.core:core-ktx\", version.ref = \"androidxCore\" }\nandroidx-core-splashscreen = { module = \"androidx.core:core-splashscreen\", version.ref = \"androidxCoreSplash\" }\nandroidx-annotation = { module = \"androidx.annotation:annotation\", version.ref = \"androidxAnnotation\" }\nandroidx-appcompat = { module = \"androidx.appcompat:appcompat\", version.ref = \"androidxAppCompat\" }\nandroidx-activity = { module = \"androidx.activity:activity-ktx\", version.ref = \"androidxActivity\" }\nandroidx-activity-compose = { module = \"androidx.activity:activity-compose\", version.ref = \"androidxActivity\" }\nandroidx-fragment = { module = \"androidx.fragment:fragment-ktx\", version.ref = \"androidxFragment\" }\nandroidx-datastore = { module = \"androidx.datastore:datastore\", version.ref = \"androidxDataStore\" }\nandroidx-datastore-proto = { module = \"androidx.datastore:datastore-core\", version.ref = \"androidxDataStore\" }\nandroidx-datastore-preferences = { module = \"androidx.datastore:datastore-preferences-core\", version.ref = \"androidxDataStore\" }\n\n# Compose\ncompose-bom = { module = \"androidx.compose:compose-bom\", version.ref = \"compose\" }\ncompose-runtime = { module = \"androidx.compose.runtime:runtime\" }\ncompose-ui = { module = \"androidx.compose.ui:ui\" }\ncompose-ui-binding = { module = \"androidx.compose.ui:ui-viewbinding\" }\ncompose-ui-tooling = { module = \"androidx.compose.ui:ui-tooling\" }\ncompose-ui-tooling-preview = { module = \"androidx.compose.ui:ui-tooling-preview\" }\n\n# KMP\nkmp-lifecycle-runtime-compose = { module = \"org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose\", version.ref = \"kmpLifecycle\" }\nkmp-lifecycle-viewmodel-compose = { module = \"org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose\", version.ref = \"kmpLifecycle\" }\nkmp-navigation-compose = { module = \"org.jetbrains.androidx.navigation:navigation-compose\", version.ref = \"kmpNavigation\" }\n\n# Purchase\npurchases-core = { module = \"com.revenuecat.purchases:purchases-kmp-core\", version.ref = \"kmpPurchase\" }\npurchases-datetime = { module = \"com.revenuecat.purchases:purchases-kmp-datetime\", version.ref = \"kmpPurchase\" }\npurchases-result = { module = \"com.revenuecat.purchases:purchases-kmp-result\", version.ref = \"kmpPurchase\" }\n\n# Adaptive\nadaptive = { module = \"org.jetbrains.compose.material3.adaptive:adaptive\", version.ref = \"adaptive\" }\nadaptive-layout = { module = \"org.jetbrains.compose.material3.adaptive:adaptive-layout\", version.ref = \"adaptive\" }\nadaptive-navigation = { module = \"org.jetbrains.compose.material3.adaptive:adaptive-navigation\", version.ref = \"adaptive\" }\n\n# Firebase\nfirebase-bom = { module = \"com.google.firebase:firebase-bom\", version.ref = \"firebase\" }\nfirebase-crashlytics = { module = \"com.google.firebase:firebase-crashlytics\" }\nfirebase-analytics = { module = \"com.google.firebase:firebase-analytics\" }\n\n# Google\nplay-review = { module = \"com.google.android.play:review-ktx\", version.ref = \"playReview\" }\nplay-update = { module = \"com.google.android.play:app-update-ktx\", version.ref = \"playUpdate\" }\nplay-service-ads = { module = \"com.google.android.gms:play-services-ads\", version.ref = \"playServiceAds\" }\n\n# Koin\nkoin-bom = { module = \"io.insert-koin:koin-bom\", version.ref = \"koin\" }\nkoin-core = { module = \"io.insert-koin:koin-core\" }\nkoin-android = { module = \"io.insert-koin:koin-android\" }\nkoin-androidx-startup = { module = \"io.insert-koin:koin-androidx-startup\", version.ref = \"koin\" }\nkoin-compose = { module = \"io.insert-koin:koin-compose\", version.ref = \"koin\" }\nkoin-compose-viewmodel = { module = \"io.insert-koin:koin-compose-viewmodel\", version.ref = \"koin\" }\n\n# Ktor\nktor-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\nktor-cio = { module = \"io.ktor:ktor-client-cio\", version.ref = \"ktor\" }\nktor-okhttp = { module = \"io.ktor:ktor-client-okhttp\", version.ref = \"ktor\" }\nktor-darwin = { module = \"io.ktor:ktor-client-darwin\", version.ref = \"ktor\" }\nktor-content-negotiation = { module = \"io.ktor:ktor-client-content-negotiation\", version.ref = \"ktor\" }\nktor-serialization-json = { module = \"io.ktor:ktor-serialization-kotlinx-json\", version.ref = \"ktor\" }\nktot-logging = { module = \"io.ktor:ktor-client-logging\", version.ref = \"ktor\" }\n\n# UI\ncalf-ui = { module = \"com.mohamedrejeb.calf:calf-ui\", version.ref = \"calf\" }\ncalf-permission = { module = \"com.mohamedrejeb.calf:calf-permissions\", version.ref = \"calf\" }\ncalf-filepicker = { module = \"com.mohamedrejeb.calf:calf-file-picker\", version.ref = \"calf\" }\nzoomable = { module = \"net.engawapg.lib:zoomable\", version.ref = \"zoomable\" }\nkolor = { module = \"com.materialkolor:material-kolor\", version.ref = \"kolor\" }\ncolorpicker = { module = \"com.github.skydoves:colorpicker-compose\", version.ref = \"colorPicker\" }\n\n# FileKit\nfilekit-core = { module = \"io.github.vinceglb:filekit-core\", version.ref = \"filekit\" }\nfilekit-dialogs = { module = \"io.github.vinceglb:filekit-dialogs-compose\", version.ref = \"filekit\" }\nfilekit-coil = { module = \"io.github.vinceglb:filekit-coil\", version.ref = \"filekit\" }\n\n# Others\ncoil3-compose = { module = \"io.coil-kt.coil3:coil-compose\", version.ref = \"coil3\" }\ncoil3-network = { module = \"io.coil-kt.coil3:coil-network-ktor3\", version.ref = \"coil3\" }\ndesugar = { module = \"com.android.tools:desugar_jdk_libs\", version = \"2.1.5\" }\nlibraries-core = { module = \"com.mikepenz:aboutlibraries-core\", version.ref = \"libraries\" }\nlibraries-ui = { module = \"com.mikepenz:aboutlibraries-compose\", version.ref = \"libraries\" }\n\n# Debugs\nnapier = { module = \"io.github.aakira:napier\", version.ref = \"napier\" }\ntwitter-compose-rule = { module = \"com.twitter.compose.rules:detekt\", version.ref = \"twitterComposeRule\" }\n\n[bundles]\ninfra = [\n    \"kotlin-stdlib\",\n    \"kotlin-reflect\",\n    \"kotlinx-datetime\",\n    \"kotlinx-serialization-json\",\n    \"kotlinx-collections-immutable\",\n    \"napier\",\n]\n\nui-android = [\n    \"androidx-core\",\n    \"androidx-annotation\",\n    \"androidx-appcompat\",\n    \"androidx-activity\",\n    \"androidx-activity-compose\",\n    \"androidx-fragment\",\n    \"compose-runtime\",\n    \"compose-ui\",\n    \"compose-ui-binding\",\n]\n\nui-common = [\n    \"kmp-lifecycle-runtime-compose\",\n    \"kmp-lifecycle-viewmodel-compose\",\n    \"kmp-navigation-compose\",\n    \"coil3-compose\",\n    \"coil3-network\",\n    \"kolor\",\n]\n\npurchase = [\n    \"purchases-core\",\n    \"purchases-result\",\n]\n\nktor = [\n    \"ktor-core\",\n    \"ktor-cio\",\n    \"ktor-content-negotiation\",\n    \"ktor-serialization-json\",\n    \"ktot-logging\",\n]\n\nkoin = [\n    \"koin-core\",\n    \"koin-compose\",\n    \"koin-compose-viewmodel\",\n]\n\ncalf = [\n    \"calf-ui\",\n    \"calf-permission\",\n    \"calf-filepicker\",\n]\n\nfirebase = [\n    \"firebase-analytics\",\n    \"firebase-crashlytics\",\n]\n\nfilekit = [\n    \"filekit-core\",\n    \"filekit-dialogs\",\n    \"filekit-coil\",\n]\n",
      "hash": "089bd33be1fe253e8d29ba8ef43babed6a75072513436086f1334cd2455c20dd",
      "size": 10448,
      "json": {
        "versions": {
          "versionName": "0.0.1",
          "versionCode": "1",
          "minSdk": "26",
          "targetSdk": "36",
          "compileSdk": "36",
          "gradle": "8.12.3",
          "kotlin": "2.2.10",
          "kotlinxCoroutines": "1.10.2",
          "kotlinxDatetime": "0.7.1",
          "kotlinxSerializationJson": "1.8.1",
          "kotlinxImmutable": "0.4.0",
          "kmpCompose": "1.9.0-beta03",
          "kmpComplete": "1.1.0",
          "kmpLifecycle": "2.9.2",
          "kmpNavigation": "2.9.0-beta05",
          "kmpPurchase": "2.1.0+16.2.0",
          "kmpPurchaseCommon": "14.0.2",
          "adaptive": "1.1.2",
          "androidxCore": "1.17.0",
          "androidxCoreSplash": "1.0.1",
          "androidxAppCompat": "1.7.1",
          "androidxActivity": "1.11.0",
          "androidxFragment": "1.8.9",
          "androidxDataStore": "1.1.7",
          "androidxAnnotation": "1.9.1",
          "compose": "2025.09.00",
          "playReview": "2.0.2",
          "playUpdate": "2.1.0",
          "playServiceAds": "24.5.0",
          "ksp": "2.2.10-2.0.2",
          "gms": "4.4.3",
          "firebase": "34.1.0",
          "firebaseCrashlytics": "3.0.6",
          "koin": "4.1.0",
          "calf": "0.8.0",
          "zoomable": "2.8.1",
          "kolor": "3.0.1",
          "colorPicker": "1.1.2",
          "ktor": "3.2.1",
          "coil3": "3.2.0",
          "filekit": "0.10.0-beta04",
          "detekt": "1.23.8",
          "libraries": "12.2.4",
          "buildKonfig": "0.17.1",
          "twitterComposeRule": "0.0.26",
          "napier": "2.7.1"
        },
        "plugins": {
          "android-application": {
            "id": "com.android.application",
            "version": {
              "ref": "gradle"
            }
          },
          "android-library": {
            "id": "com.android.library",
            "version": {
              "ref": "gradle"
            }
          },
          "kotlin-compose-compiler": {
            "id": "org.jetbrains.kotlin.plugin.compose",
            "version": {
              "ref": "kotlin"
            }
          },
          "kotlin-serialization": {
            "id": "org.jetbrains.kotlin.plugin.serialization",
            "version": {
              "ref": "kotlin"
            }
          },
          "ksp": {
            "id": "com.google.devtools.ksp",
            "version": {
              "ref": "ksp"
            }
          },
          "gms": {
            "id": "com.google.gms.google-services",
            "version": {
              "ref": "gms"
            }
          },
          "detekt": {
            "id": "io.gitlab.arturbosch.detekt",
            "version": {
              "ref": "detekt"
            }
          },
          "firebase-crashlytics": {
            "id": "com.google.firebase.crashlytics",
            "version": {
              "ref": "firebaseCrashlytics"
            }
          },
          "libraries": {
            "id": "com.mikepenz.aboutlibraries.plugin",
            "version": {
              "ref": "libraries"
            }
          },
          "kmp": {
            "id": "org.jetbrains.kotlin.multiplatform",
            "version": {
              "ref": "kotlin"
            }
          },
          "kmpCompose": {
            "id": "org.jetbrains.compose",
            "version": {
              "ref": "kmpCompose"
            }
          },
          "kmpComplete": {
            "id": "com.louiscad.complete-kotlin",
            "version": {
              "ref": "kmpComplete"
            }
          }
        },
        "libraries": {
          "android-gradlePlugin": {
            "group": "com.android.tools.build",
            "name": "gradle",
            "version": {
              "ref": "gradle"
            }
          },
          "kotlin-gradlePlugin": {
            "group": "org.jetbrains.kotlin",
            "name": "kotlin-gradle-plugin",
            "version": {
              "ref": "kotlin"
            }
          },
          "gms-services": {
            "group": "com.google.gms",
            "name": "google-services",
            "version": {
              "ref": "gms"
            }
          },
          "build-konfig-gradlePlugin": {
            "group": "com.codingfeline.buildkonfig",
            "name": "buildkonfig-gradle-plugin",
            "version": {
              "ref": "buildKonfig"
            }
          },
          "secret-gradlePlugin": {
            "group": "com.google.android.libraries.mapsplatform.secrets-gradle-plugin",
            "name": "secrets-gradle-plugin",
            "version": "2.0.1"
          },
          "detekt-gradlePlugin": {
            "group": "io.gitlab.arturbosch.detekt",
            "name": "detekt-gradle-plugin",
            "version": {
              "ref": "detekt"
            }
          },
          "detekt-formatting": {
            "group": "io.gitlab.arturbosch.detekt",
            "name": "detekt-formatting",
            "version": {
              "ref": "detekt"
            }
          },
          "kotlin-bom": {
            "module": "org.jetbrains.kotlin:kotlin-bom",
            "version": {
              "ref": "kotlin"
            }
          },
          "kotlin-stdlib": {
            "module": "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
          },
          "kotlin-reflect": {
            "module": "org.jetbrains.kotlin:kotlin-reflect"
          },
          "kotlinx-datetime": {
            "group": "org.jetbrains.kotlinx",
            "name": "kotlinx-datetime",
            "version": {
              "ref": "kotlinxDatetime"
            }
          },
          "kotlinx-serialization-json": {
            "group": "org.jetbrains.kotlinx",
            "name": "kotlinx-serialization-json",
            "version": {
              "ref": "kotlinxSerializationJson"
            }
          },
          "kotlinx-collections-immutable": {
            "group": "org.jetbrains.kotlinx",
            "name": "kotlinx-collections-immutable",
            "version": {
              "ref": "kotlinxImmutable"
            }
          },
          "androidx-core": {
            "module": "androidx.core:core-ktx",
            "version": {
              "ref": "androidxCore"
            }
          },
          "androidx-core-splashscreen": {
            "module": "androidx.core:core-splashscreen",
            "version": {
              "ref": "androidxCoreSplash"
            }
          },
          "androidx-annotation": {
            "module": "androidx.annotation:annotation",
            "version": {
              "ref": "androidxAnnotation"
            }
          },
          "androidx-appcompat": {
            "module": "androidx.appcompat:appcompat",
            "version": {
              "ref": "androidxAppCompat"
            }
          },
          "androidx-activity": {
            "module": "androidx.activity:activity-ktx",
            "version": {
              "ref": "androidxActivity"
            }
          },
          "androidx-activity-compose": {
            "module": "androidx.activity:activity-compose",
            "version": {
              "ref": "androidxActivity"
            }
          },
          "androidx-fragment": {
            "module": "androidx.fragment:fragment-ktx",
            "version": {
              "ref": "androidxFragment"
            }
          },
          "androidx-datastore": {
            "module": "androidx.datastore:datastore",
            "version": {
              "ref": "androidxDataStore"
            }
          },
          "androidx-datastore-proto": {
            "module": "androidx.datastore:datastore-core",
            "version": {
              "ref": "androidxDataStore"
            }
          },
          "androidx-datastore-preferences": {
            "module": "androidx.datastore:datastore-preferences-core",
            "version": {
              "ref": "androidxDataStore"
            }
          },
          "compose-bom": {
            "module": "androidx.compose:compose-bom",
            "version": {
              "ref": "compose"
            }
          },
          "compose-runtime": {
            "module": "androidx.compose.runtime:runtime"
          },
          "compose-ui": {
            "module": "androidx.compose.ui:ui"
          },
          "compose-ui-binding": {
            "module": "androidx.compose.ui:ui-viewbinding"
          },
          "compose-ui-tooling": {
            "module": "androidx.compose.ui:ui-tooling"
          },
          "compose-ui-tooling-preview": {
            "module": "androidx.compose.ui:ui-tooling-preview"
          },
          "kmp-lifecycle-runtime-compose": {
            "module": "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose",
            "version": {
              "ref": "kmpLifecycle"
            }
          },
          "kmp-lifecycle-viewmodel-compose": {
            "module": "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose",
            "version": {
              "ref": "kmpLifecycle"
            }
          },
          "kmp-navigation-compose": {
            "module": "org.jetbrains.androidx.navigation:navigation-compose",
            "version": {
              "ref": "kmpNavigation"
            }
          },
          "purchases-core": {
            "module": "com.revenuecat.purchases:purchases-kmp-core",
            "version": {
              "ref": "kmpPurchase"
            }
          },
          "purchases-datetime": {
            "module": "com.revenuecat.purchases:purchases-kmp-datetime",
            "version": {
              "ref": "kmpPurchase"
            }
          },
          "purchases-result": {
            "module": "com.revenuecat.purchases:purchases-kmp-result",
            "version": {
              "ref": "kmpPurchase"
            }
          },
          "adaptive": {
            "module": "org.jetbrains.compose.material3.adaptive:adaptive",
            "version": {
              "ref": "adaptive"
            }
          },
          "adaptive-layout": {
            "module": "org.jetbrains.compose.material3.adaptive:adaptive-layout",
            "version": {
              "ref": "adaptive"
            }
          },
          "adaptive-navigation": {
            "module": "org.jetbrains.compose.material3.adaptive:adaptive-navigation",
            "version": {
              "ref": "adaptive"
            }
          },
          "firebase-bom": {
            "module": "com.google.firebase:firebase-bom",
            "version": {
              "ref": "firebase"
            }
          },
          "firebase-crashlytics": {
            "module": "com.google.firebase:firebase-crashlytics"
          },
          "firebase-analytics": {
            "module": "com.google.firebase:firebase-analytics"
          },
          "play-review": {
            "module": "com.google.android.play:review-ktx",
            "version": {
              "ref": "playReview"
            }
          },
          "play-update": {
            "module": "com.google.android.play:app-update-ktx",
            "version": {
              "ref": "playUpdate"
            }
          },
          "play-service-ads": {
            "module": "com.google.android.gms:play-services-ads",
            "version": {
              "ref": "playServiceAds"
            }
          },
          "koin-bom": {
            "module": "io.insert-koin:koin-bom",
            "version": {
              "ref": "koin"
            }
          },
          "koin-core": {
            "module": "io.insert-koin:koin-core"
          },
          "koin-android": {
            "module": "io.insert-koin:koin-android"
          },
          "koin-androidx-startup": {
            "module": "io.insert-koin:koin-androidx-startup",
            "version": {
              "ref": "koin"
            }
          },
          "koin-compose": {
            "module": "io.insert-koin:koin-compose",
            "version": {
              "ref": "koin"
            }
          },
          "koin-compose-viewmodel": {
            "module": "io.insert-koin:koin-compose-viewmodel",
            "version": {
              "ref": "koin"
            }
          },
          "ktor-core": {
            "module": "io.ktor:ktor-client-core",
            "version": {
              "ref": "ktor"
            }
          },
          "ktor-cio": {
            "module": "io.ktor:ktor-client-cio",
            "version": {
              "ref": "ktor"
            }
          },
          "ktor-okhttp": {
            "module": "io.ktor:ktor-client-okhttp",
            "version": {
              "ref": "ktor"
            }
          },
          "ktor-darwin": {
            "module": "io.ktor:ktor-client-darwin",
            "version": {
              "ref": "ktor"
            }
          },
          "ktor-content-negotiation": {
            "module": "io.ktor:ktor-client-content-negotiation",
            "version": {
              "ref": "ktor"
            }
          },
          "ktor-serialization-json": {
            "module": "io.ktor:ktor-serialization-kotlinx-json",
            "version": {
              "ref": "ktor"
            }
          },
          "ktot-logging": {
            "module": "io.ktor:ktor-client-logging",
            "version": {
              "ref": "ktor"
            }
          },
          "calf-ui": {
            "module": "com.mohamedrejeb.calf:calf-ui",
            "version": {
              "ref": "calf"
            }
          },
          "calf-permission": {
            "module": "com.mohamedrejeb.calf:calf-permissions",
            "version": {
              "ref": "calf"
            }
          },
          "calf-filepicker": {
            "module": "com.mohamedrejeb.calf:calf-file-picker",
            "version": {
              "ref": "calf"
            }
          },
          "zoomable": {
            "module": "net.engawapg.lib:zoomable",
            "version": {
              "ref": "zoomable"
            }
          },
          "kolor": {
            "module": "com.materialkolor:material-kolor",
            "version": {
              "ref": "kolor"
            }
          },
          "colorpicker": {
            "module": "com.github.skydoves:colorpicker-compose",
            "version": {
              "ref": "colorPicker"
            }
          },
          "filekit-core": {
            "module": "io.github.vinceglb:filekit-core",
            "version": {
              "ref": "filekit"
            }
          },
          "filekit-dialogs": {
            "module": "io.github.vinceglb:filekit-dialogs-compose",
            "version": {
              "ref": "filekit"
            }
          },
          "filekit-coil": {
            "module": "io.github.vinceglb:filekit-coil",
            "version": {
              "ref": "filekit"
            }
          },
          "coil3-compose": {
            "module": "io.coil-kt.coil3:coil-compose",
            "version": {
              "ref": "coil3"
            }
          },
          "coil3-network": {
            "module": "io.coil-kt.coil3:coil-network-ktor3",
            "version": {
              "ref": "coil3"
            }
          },
          "desugar": {
            "module": "com.android.tools:desugar_jdk_libs",
            "version": "2.1.5"
          },
          "libraries-core": {
            "module": "com.mikepenz:aboutlibraries-core",
            "version": {
              "ref": "libraries"
            }
          },
          "libraries-ui": {
            "module": "com.mikepenz:aboutlibraries-compose",
            "version": {
              "ref": "libraries"
            }
          },
          "napier": {
            "module": "io.github.aakira:napier",
            "version": {
              "ref": "napier"
            }
          },
          "twitter-compose-rule": {
            "module": "com.twitter.compose.rules:detekt",
            "version": {
              "ref": "twitterComposeRule"
            }
          }
        },
        "bundles": {
          "infra": [
            "kotlin-stdlib",
            "kotlin-reflect",
            "kotlinx-datetime",
            "kotlinx-serialization-json",
            "kotlinx-collections-immutable",
            "napier"
          ],
          "ui-android": [
            "androidx-core",
            "androidx-annotation",
            "androidx-appcompat",
            "androidx-activity",
            "androidx-activity-compose",
            "androidx-fragment",
            "compose-runtime",
            "compose-ui",
            "compose-ui-binding"
          ],
          "ui-common": [
            "kmp-lifecycle-runtime-compose",
            "kmp-lifecycle-viewmodel-compose",
            "kmp-navigation-compose",
            "coil3-compose",
            "coil3-network",
            "kolor"
          ],
          "purchase": [
            "purchases-core",
            "purchases-result"
          ],
          "ktor": [
            "ktor-core",
            "ktor-cio",
            "ktor-content-negotiation",
            "ktor-serialization-json",
            "ktot-logging"
          ],
          "koin": [
            "koin-core",
            "koin-compose",
            "koin-compose-viewmodel"
          ],
          "calf": [
            "calf-ui",
            "calf-permission",
            "calf-filepicker"
          ],
          "firebase": [
            "firebase-analytics",
            "firebase-crashlytics"
          ],
          "filekit": [
            "filekit-core",
            "filekit-dialogs",
            "filekit-coil"
          ]
        }
      }
    },
    "/gradle/wrapper/gradle-wrapper.jar": {
      "type": "binary",
      "hash": "9687bf4e8beb2c293cfd1393cbf2854ef68f921757302116033f476289abf7b0",
      "size": 43739,
      "url": "https://raw.githubusercontent.com/matsumo0922/Grabee/b3ce0451a0717d33048fded1505c1171000a0578/gradle/wrapper/gradle-wrapper.jar"
    },
    "/gradle/wrapper/gradle-wrapper.properties": {
      "type": "content",
      "content": "distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-9.0-milestone-1-bin.zip\nnetworkTimeout=10000\nvalidateDistributionUrl=true\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n",
      "hash": "ca9362b4c92d75f71415b0d9d9307b7f363819e88fd56ade09a3d711fea43062",
      "size": 262
    },
    "/gradlew": {
      "type": "content",
      "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n",
      "hash": "734b3879d3501dce471cf0522d3bcbafe76873d9fc5129345b67fb43bd15e933",
      "size": 8752
    },
    "/gradlew.bat": {
      "type": "content",
      "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n",
      "hash": "2209f919a22528af59a2af2ad97e8d056cca18e39f7d87aa3fd549a73b180150",
      "size": 2872
    },
    "/settings.gradle.kts": {
      "type": "content",
      "content": "@file:Suppress(\"UnstableApiUsage\")\n\nrootProject.name = \"Grabee\"\nenableFeaturePreview(\"TYPESAFE_PROJECT_ACCESSORS\")\n\npluginManagement {\n    includeBuild(\"build-logic\")\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven(\"https://storage.googleapis.com/r8-releases/raw\")\n        maven(\"https://jitpack.io\")\n    }\n}\n\ninclude(\":composeApp\")\ninclude(\":core:common\")\ninclude(\":core:ui\")\ninclude(\":core:datasource\")\ninclude(\":core:repository\")\ninclude(\":core:resource\")\ninclude(\":core:model\")\ninclude(\":feature:home\")\ninclude(\":feature:setting\")\n",
      "hash": "f4a6c7686defc19baaf445beceaf5cb00906918bc242b351d12e4c6aa276c7df",
      "size": 755
    }
  }
}
